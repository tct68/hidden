/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IFuroVesting {
  export type VestParamsStruct = {
    token: PromiseOrValue<string>;
    recipient: PromiseOrValue<string>;
    start: PromiseOrValue<BigNumberish>;
    cliffDuration: PromiseOrValue<BigNumberish>;
    stepDuration: PromiseOrValue<BigNumberish>;
    steps: PromiseOrValue<BigNumberish>;
    stepPercentage: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    fromBentoBox: PromiseOrValue<boolean>;
  };

  export type VestParamsStructOutput = [
    string,
    string,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    token: string;
    recipient: string;
    start: number;
    cliffDuration: number;
    stepDuration: number;
    steps: number;
    stepPercentage: BigNumber;
    amount: BigNumber;
    fromBentoBox: boolean;
  };
}

export interface FuroVestingRouterInterface extends utils.Interface {
  functions: {
    "bentoBox()": FunctionFragment;
    "createVesting((address,address,uint32,uint32,uint32,uint32,uint128,uint128,bool),uint256)": FunctionFragment;
    "furoVesting()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "setBentoBoxApproval(address,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "wETH()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bentoBox"
      | "createVesting"
      | "furoVesting"
      | "multicall"
      | "setBentoBoxApproval"
      | "wETH"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bentoBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createVesting",
    values: [IFuroVesting.VestParamsStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "furoVesting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBentoBoxApproval",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "wETH", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bentoBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "furoVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBentoBoxApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wETH", data: BytesLike): Result;

  events: {};
}

export interface FuroVestingRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FuroVestingRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bentoBox(overrides?: CallOverrides): Promise<[string]>;

    createVesting(
      vestParams: IFuroVesting.VestParamsStruct,
      minShare: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    furoVesting(overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBentoBoxApproval(
      user: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wETH(overrides?: CallOverrides): Promise<[string]>;
  };

  bentoBox(overrides?: CallOverrides): Promise<string>;

  createVesting(
    vestParams: IFuroVesting.VestParamsStruct,
    minShare: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  furoVesting(overrides?: CallOverrides): Promise<string>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBentoBoxApproval(
    user: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wETH(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bentoBox(overrides?: CallOverrides): Promise<string>;

    createVesting(
      vestParams: IFuroVesting.VestParamsStruct,
      minShare: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        depositedShares: BigNumber;
        vestId: BigNumber;
        stepShares: BigNumber;
        cliffShares: BigNumber;
      }
    >;

    furoVesting(overrides?: CallOverrides): Promise<string>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    setBentoBoxApproval(
      user: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    wETH(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bentoBox(overrides?: CallOverrides): Promise<BigNumber>;

    createVesting(
      vestParams: IFuroVesting.VestParamsStruct,
      minShare: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    furoVesting(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBentoBoxApproval(
      user: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wETH(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bentoBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createVesting(
      vestParams: IFuroVesting.VestParamsStruct,
      minShare: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    furoVesting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBentoBoxApproval(
      user: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
