{"id":"56186a15f2b2429e2cc9f74b867e0276","_format":"hh-sol-build-info-1","solcVersion":"0.6.12","solcLongVersion":"0.6.12+commit.27d51765","input":{"language":"Solidity","sources":{"contracts/flat/SushiStrategyFlat.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n// solhint-disable avoid-low-level-calls\r\n// solhint-disable not-rely-on-time\r\n\r\n// File contracts/interfaces/IStrategy.sol\r\n// License-Identifier: MIT\r\n\r\ninterface IStrategy {\r\n    /// @notice Send the assets to the Strategy and call skim to invest them.\r\n    /// @param amount The amount of tokens to invest.\r\n    function skim(uint256 amount) external;\r\n\r\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\r\n    /// @param balance The amount of tokens the caller thinks it has invested.\r\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\r\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\r\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\r\n\r\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\r\n    /// @dev The `actualAmount` should be very close to the amount.\r\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\r\n    /// @param amount The requested amount the caller wants to withdraw.\r\n    /// @return actualAmount The real amount that is withdrawn.\r\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\r\n\r\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\r\n    /// @param balance The amount of tokens the caller thinks it has invested.\r\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\r\n    function exit(uint256 balance) external returns (int256 amountAdded);\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\r\n// License-Identifier: MIT\r\n\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\r\n// Edited by BoringCrypto\r\n\r\ncontract BoringOwnableData {\r\n    address public owner;\r\n    address public pendingOwner;\r\n}\r\n\r\ncontract BoringOwnable is BoringOwnableData {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /// @notice `owner` defaults to msg.sender on construction.\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\r\n    /// Can only be invoked by the current `owner`.\r\n    /// @param newOwner Address of the new owner.\r\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\r\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\r\n    function transferOwnership(\r\n        address newOwner,\r\n        bool direct,\r\n        bool renounce\r\n    ) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            pendingOwner = address(0);\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n\r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    /// @notice Only allows the `owner` to execute the function.\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\r\n// License-Identifier: MIT\r\n\r\n/// @notice A library for performing overflow-/underflow-safe math,\r\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\r\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b == 0 || (c = a * b) / b == a, \"BoringMath: Mul Overflow\");\r\n    }\r\n\r\n    function to128(uint256 a) internal pure returns (uint128 c) {\r\n        require(a <= uint128(-1), \"BoringMath: uint128 Overflow\");\r\n        c = uint128(a);\r\n    }\r\n\r\n    function to64(uint256 a) internal pure returns (uint64 c) {\r\n        require(a <= uint64(-1), \"BoringMath: uint64 Overflow\");\r\n        c = uint64(a);\r\n    }\r\n\r\n    function to32(uint256 a) internal pure returns (uint32 c) {\r\n        require(a <= uint32(-1), \"BoringMath: uint32 Overflow\");\r\n        c = uint32(a);\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\r\nlibrary BoringMath128 {\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\r\nlibrary BoringMath64 {\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\r\nlibrary BoringMath32 {\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\r\n// License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /// @notice EIP 2612\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\r\n// License-Identifier: MIT\r\n\r\nlibrary BoringERC20 {\r\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\r\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\r\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\r\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\r\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\r\n\r\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length >= 64) {\r\n            return abi.decode(data, (string));\r\n        } else if (data.length == 32) {\r\n            uint8 i = 0;\r\n            while (i < 32 && data[i] != 0) {\r\n                i++;\r\n            }\r\n            bytes memory bytesArray = new bytes(i);\r\n            for (i = 0; i < 32 && data[i] != 0; i++) {\r\n                bytesArray[i] = data[i];\r\n            }\r\n            return string(bytesArray);\r\n        } else {\r\n            return \"???\";\r\n        }\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token symbol.\r\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (string) Token name.\r\n    function safeName(IERC20 token) internal view returns (string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\r\n        return success ? returnDataToString(data) : \"???\";\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\r\n    /// @param token The address of the ERC-20 token contract.\r\n    /// @return (uint8) Token decimals.\r\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param from Transfer tokens from.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\r\n    }\r\n}\r\n\r\n// File contracts/strategies/SushiStrategy.sol\r\n// License-Identifier: MIT\r\n\r\ninterface ISushiBar is IERC20 {\r\n    function enter(uint256 _amount) external;\r\n\r\n    function leave(uint256 _share) external;\r\n}\r\n\r\ncontract SushiStrategyV1 is IStrategy, BoringOwnable {\r\n    using BoringMath for uint256;\r\n    using BoringERC20 for IERC20;\r\n\r\n    IERC20 private immutable sushi;\r\n    ISushiBar private immutable bar;\r\n\r\n    constructor(ISushiBar bar_, IERC20 sushi_) public {\r\n        bar = bar_;\r\n        sushi = sushi_;\r\n    }\r\n\r\n    // Send the assets to the Strategy and call skim to invest them\r\n    /// @inheritdoc IStrategy\r\n    function skim(uint256 amount) external override {\r\n        sushi.approve(address(bar), amount);\r\n        bar.enter(amount);\r\n    }\r\n\r\n    // Harvest any profits made converted to the asset and pass them to the caller\r\n    /// @inheritdoc IStrategy\r\n    function harvest(uint256 balance, address) external override onlyOwner returns (int256 amountAdded) {\r\n        uint256 share = bar.balanceOf(address(this));\r\n        uint256 totalShares = bar.totalSupply();\r\n        uint256 totalSushi = sushi.balanceOf(address(bar));\r\n        uint256 keepShare = balance.mul(totalShares) / totalSushi;\r\n        uint256 harvestShare = share.sub(keepShare);\r\n        bar.leave(harvestShare);\r\n        amountAdded = int256(sushi.balanceOf(address(this)));\r\n        sushi.safeTransfer(owner, uint256(amountAdded)); // Add as profit\r\n    }\r\n\r\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding or if the request was more than there is.\r\n    /// @inheritdoc IStrategy\r\n    function withdraw(uint256 amount) external override onlyOwner returns (uint256 actualAmount) {\r\n        uint256 totalShares = bar.totalSupply();\r\n        uint256 totalSushi = sushi.balanceOf(address(bar));\r\n        uint256 withdrawShare = amount.mul(totalShares) / totalSushi;\r\n        uint256 share = bar.balanceOf(address(this));\r\n        if (withdrawShare > share) {\r\n            withdrawShare = share;\r\n        }\r\n        bar.leave(withdrawShare);\r\n        actualAmount = sushi.balanceOf(address(this));\r\n        sushi.safeTransfer(owner, actualAmount);\r\n    }\r\n\r\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\r\n    /// @inheritdoc IStrategy\r\n    function exit(uint256 balance) external override onlyOwner returns (int256 amountAdded) {\r\n        uint256 share = bar.balanceOf(address(this));\r\n        bar.leave(share);\r\n        uint256 amount = sushi.balanceOf(address(this));\r\n        amountAdded = int256(amount - balance);\r\n        sushi.safeTransfer(owner, amount);\r\n    }\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":256},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"contracts/flat/SushiStrategyFlat.sol":{"ast":{"absolutePath":"contracts/flat/SushiStrategyFlat.sol","exportedSymbols":{"BoringERC20":[819],"BoringMath":[314],"BoringMath128":[360],"BoringMath32":[452],"BoringMath64":[406],"BoringOwnable":[162],"BoringOwnableData":[39],"IERC20":[517],"IStrategy":[34],"ISushiBar":[832],"SushiStrategyV1":[1105]},"id":1106,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.6",".12"],"nodeType":"PragmaDirective","src":"33:23:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":null,"fullyImplemented":false,"id":34,"linearizedBaseContracts":[34],"name":"IStrategy","nodeType":"ContractDefinition","nodes":[{"body":null,"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"242:128:0","text":"@notice Send the assets to the Strategy and call skim to invest them.\n @param amount The amount of tokens to invest."},"functionSelector":"6939aaf5","id":7,"implemented":false,"kind":"function","modifiers":[],"name":"skim","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":5,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":7,"src":"390:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3,"name":"uint256","nodeType":"ElementaryTypeName","src":"390:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"389:16:0"},"returnParameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"414:0:0"},"scope":34,"src":"376:39:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"423:375:0","text":"@notice Harvest any profits made converted to the asset and pass them to the caller.\n @param balance The amount of tokens the caller thinks it has invested.\n @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\n @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`."},"functionSelector":"18fccc76","id":17,"implemented":false,"kind":"function","modifiers":[],"name":"harvest","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":13,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","overrides":null,"scope":17,"src":"821:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":9,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":12,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","overrides":null,"scope":17,"src":"838:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"838:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"820:33:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"mutability":"mutable","name":"amountAdded","nodeType":"VariableDeclaration","overrides":null,"scope":17,"src":"872:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":14,"name":"int256","nodeType":"ElementaryTypeName","src":"872:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":null,"visibility":"internal"}],"src":"871:20:0"},"scope":34,"src":"804:88:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":{"id":18,"nodeType":"StructuredDocumentation","src":"900:399:0","text":"@notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\n @dev The `actualAmount` should be very close to the amount.\n The difference should NOT be used to report a loss. That's what harvest is for.\n @param amount The requested amount the caller wants to withdraw.\n @return actualAmount The real amount that is withdrawn."},"functionSelector":"2e1a7d4d","id":25,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":21,"nodeType":"ParameterList","parameters":[{"constant":false,"id":20,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":25,"src":"1323:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19,"name":"uint256","nodeType":"ElementaryTypeName","src":"1323:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1322:16:0"},"returnParameters":{"id":24,"nodeType":"ParameterList","parameters":[{"constant":false,"id":23,"mutability":"mutable","name":"actualAmount","nodeType":"VariableDeclaration","overrides":null,"scope":25,"src":"1357:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":22,"name":"uint256","nodeType":"ElementaryTypeName","src":"1357:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1356:22:0"},"scope":34,"src":"1305:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":{"id":26,"nodeType":"StructuredDocumentation","src":"1387:257:0","text":"@notice Withdraw all assets in the safest way possible. This shouldn't fail.\n @param balance The amount of tokens the caller thinks it has invested.\n @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`."},"functionSelector":"7f8661a1","id":33,"implemented":false,"kind":"function","modifiers":[],"name":"exit","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":29,"nodeType":"ParameterList","parameters":[{"constant":false,"id":28,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","overrides":null,"scope":33,"src":"1664:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":27,"name":"uint256","nodeType":"ElementaryTypeName","src":"1664:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1663:17:0"},"returnParameters":{"id":32,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"mutability":"mutable","name":"amountAdded","nodeType":"VariableDeclaration","overrides":null,"scope":33,"src":"1699:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":30,"name":"int256","nodeType":"ElementaryTypeName","src":"1699:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":null,"visibility":"internal"}],"src":"1698:20:0"},"scope":34,"src":"1650:69:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1106,"src":"215:1507:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":39,"linearizedBaseContracts":[39],"name":"BoringOwnableData","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"8da5cb5b","id":36,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","overrides":null,"scope":39,"src":"2066:20:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":35,"name":"address","nodeType":"ElementaryTypeName","src":"2066:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"public"},{"constant":false,"functionSelector":"e30c3978","id":38,"mutability":"mutable","name":"pendingOwner","nodeType":"VariableDeclaration","overrides":null,"scope":39,"src":"2093:27:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"2093:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"public"}],"scope":1106,"src":"2032:92:0"},{"abstract":false,"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":40,"name":"BoringOwnableData","nodeType":"UserDefinedTypeName","referencedDeclaration":39,"src":"2154:17:0","typeDescriptions":{"typeIdentifier":"t_contract$_BoringOwnableData_$39","typeString":"contract BoringOwnableData"}},"id":41,"nodeType":"InheritanceSpecifier","src":"2154:17:0"}],"contractDependencies":[39],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":162,"linearizedBaseContracts":[162,39],"name":"BoringOwnable","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":null,"id":47,"name":"OwnershipTransferred","nodeType":"EventDefinition","parameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"indexed":true,"mutability":"mutable","name":"previousOwner","nodeType":"VariableDeclaration","overrides":null,"scope":47,"src":"2206:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42,"name":"address","nodeType":"ElementaryTypeName","src":"2206:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":45,"indexed":true,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","overrides":null,"scope":47,"src":"2237:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":44,"name":"address","nodeType":"ElementaryTypeName","src":"2237:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"2205:57:0"},"src":"2179:84:0"},{"body":{"id":65,"nodeType":"Block","src":"2357:97:0","statements":[{"expression":{"argumentTypes":null,"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":51,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"2368:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":52,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2376:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2376:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2368:18:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":55,"nodeType":"ExpressionStatement","src":"2368:18:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":59,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2431:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":58,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2423:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":57,"name":"address","nodeType":"ElementaryTypeName","src":"2423:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":60,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2423:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":61,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2435:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2435:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":56,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"2402:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2402:44:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":64,"nodeType":"EmitStatement","src":"2397:49:0"}]},"documentation":{"id":48,"nodeType":"StructuredDocumentation","src":"2271:59:0","text":"@notice `owner` defaults to msg.sender on construction."},"id":66,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":49,"nodeType":"ParameterList","parameters":[],"src":"2347:2:0"},"returnParameters":{"id":50,"nodeType":"ParameterList","parameters":[],"src":"2357:0:0"},"scope":162,"src":"2336:118:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":114,"nodeType":"Block","src":"3044:382:0","statements":[{"condition":{"argumentTypes":null,"id":78,"name":"direct","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"3059:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":112,"nodeType":"Block","src":"3345:74:0","statements":[{"expression":{"argumentTypes":null,"id":110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":108,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"3384:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":109,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"3399:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3384:23:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":111,"nodeType":"ExpressionStatement","src":"3384:23:0"}]},"id":113,"nodeType":"IfStatement","src":"3055:364:0","trueBody":{"id":107,"nodeType":"Block","src":"3067:272:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":87,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":85,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":80,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"3113:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3133:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":82,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3125:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":81,"name":"address","nodeType":"ElementaryTypeName","src":"3125:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":84,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3125:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3113:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"id":86,"name":"renounce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"3139:8:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3113:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4f776e61626c653a207a65726f2061646472657373","id":88,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3149:23:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_4bea69941b0d0257b3e89326ac37d51764d80d2e6e1a44e2d90b6a6f85f1b830","typeString":"literal_string \"Ownable: zero address\""},"value":"Ownable: zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4bea69941b0d0257b3e89326ac37d51764d80d2e6e1a44e2d90b6a6f85f1b830","typeString":"literal_string \"Ownable: zero address\""}],"id":79,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3105:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3105:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":90,"nodeType":"ExpressionStatement","src":"3105:68:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":92,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"3240:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":93,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"3247:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":91,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"3219:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3219:37:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":95,"nodeType":"EmitStatement","src":"3214:42:0"},{"expression":{"argumentTypes":null,"id":98,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":96,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"3271:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":97,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69,"src":"3279:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3271:16:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":99,"nodeType":"ExpressionStatement","src":"3271:16:0"},{"expression":{"argumentTypes":null,"id":105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":100,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"3302:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3325:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3317:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"3317:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3317:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3302:25:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":106,"nodeType":"ExpressionStatement","src":"3302:25:0"}]}}]},"documentation":{"id":67,"nodeType":"StructuredDocumentation","src":"2462:452:0","text":"@notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\n Can only be invoked by the current `owner`.\n @param newOwner Address of the new owner.\n @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\n @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."},"functionSelector":"078dfbe7","id":115,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":76,"modifierName":{"argumentTypes":null,"id":75,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"3034:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3034:9:0"}],"name":"transferOwnership","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":74,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69,"mutability":"mutable","name":"newOwner","nodeType":"VariableDeclaration","overrides":null,"scope":115,"src":"2957:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":68,"name":"address","nodeType":"ElementaryTypeName","src":"2957:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":71,"mutability":"mutable","name":"direct","nodeType":"VariableDeclaration","overrides":null,"scope":115,"src":"2984:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":70,"name":"bool","nodeType":"ElementaryTypeName","src":"2984:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":73,"mutability":"mutable","name":"renounce","nodeType":"VariableDeclaration","overrides":null,"scope":115,"src":"3006:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":72,"name":"bool","nodeType":"ElementaryTypeName","src":"3006:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"2946:80:0"},"returnParameters":{"id":77,"nodeType":"ParameterList","parameters":[],"src":"3044:0:0"},"scope":162,"src":"2920:506:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":147,"nodeType":"Block","src":"3541:307:0","statements":[{"assignments":[120],"declarations":[{"constant":false,"id":120,"mutability":"mutable","name":"_pendingOwner","nodeType":"VariableDeclaration","overrides":null,"scope":147,"src":"3552:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":119,"name":"address","nodeType":"ElementaryTypeName","src":"3552:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":122,"initialValue":{"argumentTypes":null,"id":121,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"3576:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3552:36:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":124,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3628:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3628:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":126,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"3642:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3628:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572","id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3657:34:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_a7ec3208bb4c778bbdbdd3fdfe92b1d315d85dd01a9131ea9f648f906ac7a6b8","typeString":"literal_string \"Ownable: caller != pending owner\""},"value":"Ownable: caller != pending owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a7ec3208bb4c778bbdbdd3fdfe92b1d315d85dd01a9131ea9f648f906ac7a6b8","typeString":"literal_string \"Ownable: caller != pending owner\""}],"id":123,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3620:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3620:72:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":130,"nodeType":"ExpressionStatement","src":"3620:72:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":132,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"3751:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":133,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"3758:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":131,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"3730:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3730:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":135,"nodeType":"EmitStatement","src":"3725:47:0"},{"expression":{"argumentTypes":null,"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":136,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"3783:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":137,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"3791:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3783:21:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":139,"nodeType":"ExpressionStatement","src":"3783:21:0"},{"expression":{"argumentTypes":null,"id":145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":140,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"3815:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3838:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3830:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":141,"name":"address","nodeType":"ElementaryTypeName","src":"3830:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3830:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3815:25:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":146,"nodeType":"ExpressionStatement","src":"3815:25:0"}]},"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"3434:68:0","text":"@notice Needs to be called by `pendingOwner` to claim ownership."},"functionSelector":"4e71e0c8","id":148,"implemented":true,"kind":"function","modifiers":[],"name":"claimOwnership","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":117,"nodeType":"ParameterList","parameters":[],"src":"3531:2:0"},"returnParameters":{"id":118,"nodeType":"ParameterList","parameters":[],"src":"3541:0:0"},"scope":162,"src":"3508:340:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":160,"nodeType":"Block","src":"3943:95:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":152,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3962:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3962:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":154,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"3976:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3962:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3983:34:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":151,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3954:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3954:64:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":158,"nodeType":"ExpressionStatement","src":"3954:64:0"},{"id":159,"nodeType":"PlaceholderStatement","src":"4029:1:0"}]},"documentation":{"id":149,"nodeType":"StructuredDocumentation","src":"3856:60:0","text":"@notice Only allows the `owner` to execute the function."},"id":161,"name":"onlyOwner","nodeType":"ModifierDefinition","overrides":null,"parameters":{"id":150,"nodeType":"ParameterList","parameters":[],"src":"3940:2:0"},"src":"3922:116:0","virtual":false,"visibility":"internal"}],"scope":1106,"src":"2128:1913:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"4156:153:0","text":"@notice A library for performing overflow-/underflow-safe math,\n updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)."},"fullyImplemented":true,"id":314,"linearizedBaseContracts":[314],"name":"BoringMath","nodeType":"ContractDefinition","nodes":[{"body":{"id":184,"nodeType":"Block","src":"4404:72:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":173,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"4424:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":174,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"4428:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":175,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"4432:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4428:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4424:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":178,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4423:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":179,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"4438:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4423:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20416464204f766572666c6f77","id":181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4441:26:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""},"value":"BoringMath: Add Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""}],"id":172,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4415:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4415:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":183,"nodeType":"ExpressionStatement","src":"4415:53:0"}]},"documentation":null,"id":185,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":165,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":185,"src":"4348:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":164,"name":"uint256","nodeType":"ElementaryTypeName","src":"4348:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":167,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":185,"src":"4359:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":166,"name":"uint256","nodeType":"ElementaryTypeName","src":"4359:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4347:22:0"},"returnParameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":170,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":185,"src":"4393:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":169,"name":"uint256","nodeType":"ElementaryTypeName","src":"4393:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4392:11:0"},"scope":314,"src":"4335:141:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":206,"nodeType":"Block","src":"4553:69:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":195,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"4573:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":196,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"4577:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":197,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"4581:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4577:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4573:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":200,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4572:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":201,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"4587:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4572:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20556e646572666c6f77","id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4590:23:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""},"value":"BoringMath: Underflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""}],"id":194,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4564:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4564:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":205,"nodeType":"ExpressionStatement","src":"4564:50:0"}]},"documentation":null,"id":207,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":207,"src":"4497:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"4497:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":207,"src":"4508:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":188,"name":"uint256","nodeType":"ElementaryTypeName","src":"4508:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4496:22:0"},"returnParameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":207,"src":"4542:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":191,"name":"uint256","nodeType":"ElementaryTypeName","src":"4542:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4541:11:0"},"scope":314,"src":"4484:138:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":234,"nodeType":"Block","src":"4699:86:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":217,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"4718:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4723:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4718:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":220,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"4729:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":221,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"4733:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"argumentTypes":null,"id":222,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"4737:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4733:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4729:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":225,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4728:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":226,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"4742:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4728:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":228,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"4747:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4728:20:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4718:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a204d756c204f766572666c6f77","id":231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4750:26:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_efa2024ddfa13946089ac6325359d421926f574cb871587fa659a82734fa675e","typeString":"literal_string \"BoringMath: Mul Overflow\""},"value":"BoringMath: Mul Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_efa2024ddfa13946089ac6325359d421926f574cb871587fa659a82734fa675e","typeString":"literal_string \"BoringMath: Mul Overflow\""}],"id":216,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4710:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4710:67:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":233,"nodeType":"ExpressionStatement","src":"4710:67:0"}]},"documentation":null,"id":235,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":209,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":235,"src":"4643:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":208,"name":"uint256","nodeType":"ElementaryTypeName","src":"4643:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":211,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":235,"src":"4654:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":210,"name":"uint256","nodeType":"ElementaryTypeName","src":"4654:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4642:22:0"},"returnParameters":{"id":215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":214,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":235,"src":"4688:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":213,"name":"uint256","nodeType":"ElementaryTypeName","src":"4688:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4687:11:0"},"scope":314,"src":"4630:155:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":260,"nodeType":"Block","src":"4853:101:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":243,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"4872:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":247,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"4885:2:0","subExpression":{"argumentTypes":null,"hexValue":"31","id":246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4886:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}],"id":245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4877:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":244,"name":"uint128","nodeType":"ElementaryTypeName","src":"4877:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4877:11:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"4872:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a2075696e74313238204f766572666c6f77","id":250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4890:30:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_64196137e15a5be4f7488ecfa918cfa26a6c2051ae3fb739c5de9bf8431fe9a5","typeString":"literal_string \"BoringMath: uint128 Overflow\""},"value":"BoringMath: uint128 Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_64196137e15a5be4f7488ecfa918cfa26a6c2051ae3fb739c5de9bf8431fe9a5","typeString":"literal_string \"BoringMath: uint128 Overflow\""}],"id":242,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4864:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4864:57:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":252,"nodeType":"ExpressionStatement","src":"4864:57:0"},{"expression":{"argumentTypes":null,"id":258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":253,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"4932:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":256,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"4944:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4936:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":254,"name":"uint128","nodeType":"ElementaryTypeName","src":"4936:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4936:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"4932:14:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"id":259,"nodeType":"ExpressionStatement","src":"4932:14:0"}]},"documentation":null,"id":261,"implemented":true,"kind":"function","modifiers":[],"name":"to128","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":261,"src":"4808:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":236,"name":"uint256","nodeType":"ElementaryTypeName","src":"4808:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4807:11:0"},"returnParameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":240,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":261,"src":"4842:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":239,"name":"uint128","nodeType":"ElementaryTypeName","src":"4842:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"}],"src":"4841:11:0"},"scope":314,"src":"4793:161:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":286,"nodeType":"Block","src":"5020:98:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":269,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"5039:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"5051:2:0","subExpression":{"argumentTypes":null,"hexValue":"31","id":272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5052:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}],"id":271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5044:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":270,"name":"uint64","nodeType":"ElementaryTypeName","src":"5044:6:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5044:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5039:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a2075696e743634204f766572666c6f77","id":276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5056:29:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_b3c33265b589f76cafa7df00c0a28addc9a2c2003a13a1e0e4b875f58eb08764","typeString":"literal_string \"BoringMath: uint64 Overflow\""},"value":"BoringMath: uint64 Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b3c33265b589f76cafa7df00c0a28addc9a2c2003a13a1e0e4b875f58eb08764","typeString":"literal_string \"BoringMath: uint64 Overflow\""}],"id":268,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5031:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5031:55:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":278,"nodeType":"ExpressionStatement","src":"5031:55:0"},{"expression":{"argumentTypes":null,"id":284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":279,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"5097:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":282,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"5108:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5101:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":280,"name":"uint64","nodeType":"ElementaryTypeName","src":"5101:6:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5101:9:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5097:13:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":285,"nodeType":"ExpressionStatement","src":"5097:13:0"}]},"documentation":null,"id":287,"implemented":true,"kind":"function","modifiers":[],"name":"to64","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":287,"src":"4976:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":262,"name":"uint256","nodeType":"ElementaryTypeName","src":"4976:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4975:11:0"},"returnParameters":{"id":267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":266,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":287,"src":"5010:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":265,"name":"uint64","nodeType":"ElementaryTypeName","src":"5010:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"}],"src":"5009:10:0"},"scope":314,"src":"4962:156:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":312,"nodeType":"Block","src":"5184:98:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":295,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"5203:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"5215:2:0","subExpression":{"argumentTypes":null,"hexValue":"31","id":298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5216:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}],"id":297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5208:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":296,"name":"uint32","nodeType":"ElementaryTypeName","src":"5208:6:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5208:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"5203:15:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a2075696e743332204f766572666c6f77","id":302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5220:29:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_d8918cd18a3e78dc3bd01c63d310640381efda31e2d3ce751014519bc65013fc","typeString":"literal_string \"BoringMath: uint32 Overflow\""},"value":"BoringMath: uint32 Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d8918cd18a3e78dc3bd01c63d310640381efda31e2d3ce751014519bc65013fc","typeString":"literal_string \"BoringMath: uint32 Overflow\""}],"id":294,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5195:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5195:55:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":304,"nodeType":"ExpressionStatement","src":"5195:55:0"},{"expression":{"argumentTypes":null,"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":305,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":292,"src":"5261:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":308,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"5272:1:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":307,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5265:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":306,"name":"uint32","nodeType":"ElementaryTypeName","src":"5265:6:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5265:9:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"5261:13:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":311,"nodeType":"ExpressionStatement","src":"5261:13:0"}]},"documentation":null,"id":313,"implemented":true,"kind":"function","modifiers":[],"name":"to32","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":289,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":313,"src":"5140:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":288,"name":"uint256","nodeType":"ElementaryTypeName","src":"5140:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5139:11:0"},"returnParameters":{"id":293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":292,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":313,"src":"5174:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":291,"name":"uint32","nodeType":"ElementaryTypeName","src":"5174:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"}],"src":"5173:10:0"},"scope":314,"src":"5126:156:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1106,"src":"4309:976:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":315,"nodeType":"StructuredDocumentation","src":"5289:100:0","text":"@notice A library for performing overflow-/underflow-safe addition and subtraction on uint128."},"fullyImplemented":true,"id":360,"linearizedBaseContracts":[360],"name":"BoringMath128","nodeType":"ContractDefinition","nodes":[{"body":{"id":336,"nodeType":"Block","src":"5487:72:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":325,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":322,"src":"5507:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":326,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"5511:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":327,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"5515:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"5511:5:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"5507:9:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"id":330,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5506:11:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":331,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"5521:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"5506:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20416464204f766572666c6f77","id":333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5524:26:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""},"value":"BoringMath: Add Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""}],"id":324,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5498:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5498:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":335,"nodeType":"ExpressionStatement","src":"5498:53:0"}]},"documentation":null,"id":337,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":337,"src":"5431:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":316,"name":"uint128","nodeType":"ElementaryTypeName","src":"5431:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"},{"constant":false,"id":319,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":337,"src":"5442:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":318,"name":"uint128","nodeType":"ElementaryTypeName","src":"5442:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"}],"src":"5430:22:0"},"returnParameters":{"id":323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":337,"src":"5476:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":321,"name":"uint128","nodeType":"ElementaryTypeName","src":"5476:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"}],"src":"5475:11:0"},"scope":360,"src":"5418:141:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":358,"nodeType":"Block","src":"5636:69:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":347,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"5656:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":348,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"5660:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":349,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"5664:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"5660:5:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"5656:9:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}}],"id":352,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5655:11:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":353,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"5670:1:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"5655:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20556e646572666c6f77","id":355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5673:23:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""},"value":"BoringMath: Underflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""}],"id":346,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5647:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5647:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":357,"nodeType":"ExpressionStatement","src":"5647:50:0"}]},"documentation":null,"id":359,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":339,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":359,"src":"5580:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":338,"name":"uint128","nodeType":"ElementaryTypeName","src":"5580:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"},{"constant":false,"id":341,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":359,"src":"5591:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":340,"name":"uint128","nodeType":"ElementaryTypeName","src":"5591:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"}],"src":"5579:22:0"},"returnParameters":{"id":345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":359,"src":"5625:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":343,"name":"uint128","nodeType":"ElementaryTypeName","src":"5625:7:0","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"value":null,"visibility":"internal"}],"src":"5624:11:0"},"scope":360,"src":"5567:138:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1106,"src":"5389:319:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":361,"nodeType":"StructuredDocumentation","src":"5712:99:0","text":"@notice A library for performing overflow-/underflow-safe addition and subtraction on uint64."},"fullyImplemented":true,"id":406,"linearizedBaseContracts":[406],"name":"BoringMath64","nodeType":"ContractDefinition","nodes":[{"body":{"id":382,"nodeType":"Block","src":"5905:72:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":371,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"5925:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":372,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":363,"src":"5929:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":373,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"5933:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5929:5:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5925:9:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":376,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5924:11:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":377,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"5939:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5924:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20416464204f766572666c6f77","id":379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5942:26:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""},"value":"BoringMath: Add Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""}],"id":370,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5916:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5916:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":381,"nodeType":"ExpressionStatement","src":"5916:53:0"}]},"documentation":null,"id":383,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":363,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":383,"src":"5852:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":362,"name":"uint64","nodeType":"ElementaryTypeName","src":"5852:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"},{"constant":false,"id":365,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":383,"src":"5862:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":364,"name":"uint64","nodeType":"ElementaryTypeName","src":"5862:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"}],"src":"5851:20:0"},"returnParameters":{"id":369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":368,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":383,"src":"5895:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":367,"name":"uint64","nodeType":"ElementaryTypeName","src":"5895:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"}],"src":"5894:10:0"},"scope":406,"src":"5839:138:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":404,"nodeType":"Block","src":"6051:69:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":393,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"6071:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":394,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"6075:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":395,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"6079:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6075:5:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6071:9:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":398,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6070:11:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":399,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"6085:1:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6070:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20556e646572666c6f77","id":401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6088:23:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""},"value":"BoringMath: Underflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""}],"id":392,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6062:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6062:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":403,"nodeType":"ExpressionStatement","src":"6062:50:0"}]},"documentation":null,"id":405,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":385,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":405,"src":"5998:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":384,"name":"uint64","nodeType":"ElementaryTypeName","src":"5998:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"},{"constant":false,"id":387,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":405,"src":"6008:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":386,"name":"uint64","nodeType":"ElementaryTypeName","src":"6008:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"}],"src":"5997:20:0"},"returnParameters":{"id":391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":390,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":405,"src":"6041:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":389,"name":"uint64","nodeType":"ElementaryTypeName","src":"6041:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":null,"visibility":"internal"}],"src":"6040:10:0"},"scope":406,"src":"5985:135:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1106,"src":"5811:312:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":407,"nodeType":"StructuredDocumentation","src":"6127:99:0","text":"@notice A library for performing overflow-/underflow-safe addition and subtraction on uint32."},"fullyImplemented":true,"id":452,"linearizedBaseContracts":[452],"name":"BoringMath32","nodeType":"ContractDefinition","nodes":[{"body":{"id":428,"nodeType":"Block","src":"6320:72:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":417,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"6340:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":418,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":409,"src":"6344:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":419,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"6348:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6344:5:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6340:9:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":422,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6339:11:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":423,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"6354:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6339:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20416464204f766572666c6f77","id":425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6357:26:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""},"value":"BoringMath: Add Overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_77ffeda554f4c047bf45dac1a596ee270f922490aa5e98c6ba2b9599856e6fdf","typeString":"literal_string \"BoringMath: Add Overflow\""}],"id":416,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6331:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6331:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":427,"nodeType":"ExpressionStatement","src":"6331:53:0"}]},"documentation":null,"id":429,"implemented":true,"kind":"function","modifiers":[],"name":"add","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":409,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":429,"src":"6267:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":408,"name":"uint32","nodeType":"ElementaryTypeName","src":"6267:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"},{"constant":false,"id":411,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":429,"src":"6277:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":410,"name":"uint32","nodeType":"ElementaryTypeName","src":"6277:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"}],"src":"6266:20:0"},"returnParameters":{"id":415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":414,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":429,"src":"6310:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":413,"name":"uint32","nodeType":"ElementaryTypeName","src":"6310:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"}],"src":"6309:10:0"},"scope":452,"src":"6254:138:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":450,"nodeType":"Block","src":"6466:69:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":439,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":436,"src":"6486:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint32","typeString":"uint32"},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":440,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"6490:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":441,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"6494:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6490:5:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6486:9:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"id":444,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6485:11:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":445,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"6500:1:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"6485:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e674d6174683a20556e646572666c6f77","id":447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6503:23:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""},"value":"BoringMath: Underflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00354eeca4367367797d07bf5ab6743c0cc453fe689bbb72132c3c4e2b5612aa","typeString":"literal_string \"BoringMath: Underflow\""}],"id":438,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6477:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6477:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":449,"nodeType":"ExpressionStatement","src":"6477:50:0"}]},"documentation":null,"id":451,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":431,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","overrides":null,"scope":451,"src":"6413:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":430,"name":"uint32","nodeType":"ElementaryTypeName","src":"6413:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"},{"constant":false,"id":433,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","overrides":null,"scope":451,"src":"6423:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":432,"name":"uint32","nodeType":"ElementaryTypeName","src":"6423:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"}],"src":"6412:20:0"},"returnParameters":{"id":437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","overrides":null,"scope":451,"src":"6456:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":435,"name":"uint32","nodeType":"ElementaryTypeName","src":"6456:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"}],"src":"6455:10:0"},"scope":452,"src":"6400:135:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1106,"src":"6226:312:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":null,"fullyImplemented":false,"id":517,"linearizedBaseContracts":[517],"name":"IERC20","nodeType":"ContractDefinition","nodes":[{"body":null,"documentation":null,"functionSelector":"18160ddd","id":457,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":453,"nodeType":"ParameterList","parameters":[],"src":"6694:2:0"},"returnParameters":{"id":456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":455,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":457,"src":"6720:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":454,"name":"uint256","nodeType":"ElementaryTypeName","src":"6720:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6719:9:0"},"scope":517,"src":"6674:55:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"70a08231","id":464,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":459,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","overrides":null,"scope":464,"src":"6756:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":458,"name":"address","nodeType":"ElementaryTypeName","src":"6756:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"6755:17:0"},"returnParameters":{"id":463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":464,"src":"6796:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":461,"name":"uint256","nodeType":"ElementaryTypeName","src":"6796:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6795:9:0"},"scope":517,"src":"6737:68:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"dd62ed3e","id":473,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":466,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","overrides":null,"scope":473,"src":"6832:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":465,"name":"address","nodeType":"ElementaryTypeName","src":"6832:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":468,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":473,"src":"6847:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":467,"name":"address","nodeType":"ElementaryTypeName","src":"6847:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"6831:32:0"},"returnParameters":{"id":472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":473,"src":"6887:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":470,"name":"uint256","nodeType":"ElementaryTypeName","src":"6887:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6886:9:0"},"scope":517,"src":"6813:83:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"095ea7b3","id":482,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":475,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":482,"src":"6921:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":474,"name":"address","nodeType":"ElementaryTypeName","src":"6921:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":477,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":482,"src":"6938:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":476,"name":"uint256","nodeType":"ElementaryTypeName","src":"6938:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6920:33:0"},"returnParameters":{"id":481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":480,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":482,"src":"6972:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":479,"name":"bool","nodeType":"ElementaryTypeName","src":"6972:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"6971:6:0"},"scope":517,"src":"6904:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":null,"id":490,"name":"Transfer","nodeType":"EventDefinition","parameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":490,"src":"7001:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":483,"name":"address","nodeType":"ElementaryTypeName","src":"7001:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":486,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":490,"src":"7023:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":485,"name":"address","nodeType":"ElementaryTypeName","src":"7023:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":488,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":490,"src":"7043:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":487,"name":"uint256","nodeType":"ElementaryTypeName","src":"7043:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7000:57:0"},"src":"6986:72:0"},{"anonymous":false,"documentation":null,"id":498,"name":"Approval","nodeType":"EventDefinition","parameters":{"id":497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":492,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","overrides":null,"scope":498,"src":"7079:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":491,"name":"address","nodeType":"ElementaryTypeName","src":"7079:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":494,"indexed":true,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":498,"src":"7102:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":493,"name":"address","nodeType":"ElementaryTypeName","src":"7102:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":496,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":498,"src":"7127:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":495,"name":"uint256","nodeType":"ElementaryTypeName","src":"7127:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7078:63:0"},"src":"7064:78:0"},{"body":null,"documentation":{"id":499,"nodeType":"StructuredDocumentation","src":"7150:20:0","text":"@notice EIP 2612"},"functionSelector":"d505accf","id":516,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":501,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","overrides":null,"scope":516,"src":"7202:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":500,"name":"address","nodeType":"ElementaryTypeName","src":"7202:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":503,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","overrides":null,"scope":516,"src":"7226:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":502,"name":"address","nodeType":"ElementaryTypeName","src":"7226:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":505,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","overrides":null,"scope":516,"src":"7252:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":504,"name":"uint256","nodeType":"ElementaryTypeName","src":"7252:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","overrides":null,"scope":516,"src":"7276:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":506,"name":"uint256","nodeType":"ElementaryTypeName","src":"7276:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":509,"mutability":"mutable","name":"v","nodeType":"VariableDeclaration","overrides":null,"scope":516,"src":"7303:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":508,"name":"uint8","nodeType":"ElementaryTypeName","src":"7303:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"internal"},{"constant":false,"id":511,"mutability":"mutable","name":"r","nodeType":"VariableDeclaration","overrides":null,"scope":516,"src":"7321:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":510,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7321:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"},{"constant":false,"id":513,"mutability":"mutable","name":"s","nodeType":"VariableDeclaration","overrides":null,"scope":516,"src":"7341:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":512,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7341:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":null,"visibility":"internal"}],"src":"7191:166:0"},"returnParameters":{"id":515,"nodeType":"ParameterList","parameters":[],"src":"7366:0:0"},"scope":517,"src":"7176:191:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1106,"src":"6650:720:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":null,"fullyImplemented":true,"id":819,"linearizedBaseContracts":[819],"name":"BoringERC20","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":520,"mutability":"constant","name":"SIG_SYMBOL","nodeType":"VariableDeclaration","overrides":null,"scope":819,"src":"7513:47:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":518,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7513:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"argumentTypes":null,"hexValue":"30783935643839623431","id":519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7550:10:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2514000705_by_1","typeString":"int_const 2514000705"},"value":"0x95d89b41"},"visibility":"private"},{"constant":true,"id":523,"mutability":"constant","name":"SIG_NAME","nodeType":"VariableDeclaration","overrides":null,"scope":819,"src":"7579:45:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":521,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7579:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"argumentTypes":null,"hexValue":"30783036666464653033","id":522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7614:10:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_117300739_by_1","typeString":"int_const 117300739"},"value":"0x06fdde03"},"visibility":"private"},{"constant":true,"id":526,"mutability":"constant","name":"SIG_DECIMALS","nodeType":"VariableDeclaration","overrides":null,"scope":819,"src":"7641:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":524,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7641:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"argumentTypes":null,"hexValue":"30783331336365353637","id":525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7680:10:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_826074471_by_1","typeString":"int_const 826074471"},"value":"0x313ce567"},"visibility":"private"},{"constant":true,"id":529,"mutability":"constant","name":"SIG_TRANSFER","nodeType":"VariableDeclaration","overrides":null,"scope":819,"src":"7711:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":527,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7711:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"argumentTypes":null,"hexValue":"30786139303539636262","id":528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7750:10:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2835717307_by_1","typeString":"int_const 2835717307"},"value":"0xa9059cbb"},"visibility":"private"},{"constant":true,"id":532,"mutability":"constant","name":"SIG_TRANSFER_FROM","nodeType":"VariableDeclaration","overrides":null,"scope":819,"src":"7796:54:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":530,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7796:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"argumentTypes":null,"hexValue":"30783233623837326464","id":531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7840:10:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_599290589_by_1","typeString":"int_const 599290589"},"value":"0x23b872dd"},"visibility":"private"},{"body":{"id":618,"nodeType":"Block","src":"7985:502:0","statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":539,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"8000:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8000:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"hexValue":"3634","id":541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8015:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8000:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":552,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"8089:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8089:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"3332","id":554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8104:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8089:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":615,"nodeType":"Block","src":"8441:39:0","statements":[{"expression":{"argumentTypes":null,"hexValue":"3f3f3f","id":613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8463:5:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ad68b4dd5516c9b8c2050c111c09e315e44fd13499c6724a87c1b4642b615187","typeString":"literal_string \"???\""},"value":"???"},"functionReturnParameters":538,"id":614,"nodeType":"Return","src":"8456:12:0"}]},"id":616,"nodeType":"IfStatement","src":"8085:395:0","trueBody":{"id":612,"nodeType":"Block","src":"8108:327:0","statements":[{"assignments":[557],"declarations":[{"constant":false,"id":557,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","overrides":null,"scope":612,"src":"8123:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":556,"name":"uint8","nodeType":"ElementaryTypeName","src":"8123:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"internal"}],"id":559,"initialValue":{"argumentTypes":null,"hexValue":"30","id":558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8133:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8123:11:0"},{"body":{"id":572,"nodeType":"Block","src":"8180:38:0","statements":[{"expression":{"argumentTypes":null,"id":570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8199:3:0","subExpression":{"argumentTypes":null,"id":569,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"8199:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":571,"nodeType":"ExpressionStatement","src":"8199:3:0"}]},"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":560,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"8156:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"hexValue":"3332","id":561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8160:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8156:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":563,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"8166:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":565,"indexExpression":{"argumentTypes":null,"id":564,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"8171:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8166:7:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8177:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8166:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8156:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":573,"nodeType":"WhileStatement","src":"8149:69:0"},{"assignments":[575],"declarations":[{"constant":false,"id":575,"mutability":"mutable","name":"bytesArray","nodeType":"VariableDeclaration","overrides":null,"scope":612,"src":"8232:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":574,"name":"bytes","nodeType":"ElementaryTypeName","src":"8232:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":580,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":578,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"8268:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"8258:9:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":576,"name":"bytes","nodeType":"ElementaryTypeName","src":"8262:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8258:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"8232:38:0"},{"body":{"id":605,"nodeType":"Block","src":"8326:58:0","statements":[{"expression":{"argumentTypes":null,"id":603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":597,"name":"bytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"8345:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":599,"indexExpression":{"argumentTypes":null,"id":598,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"8356:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8345:13:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":600,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"8361:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":602,"indexExpression":{"argumentTypes":null,"id":601,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"8366:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8361:7:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"8345:23:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":604,"nodeType":"ExpressionStatement","src":"8345:23:0"}]},"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":585,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"8297:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"hexValue":"3332","id":586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8301:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8297:6:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":588,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"8307:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":590,"indexExpression":{"argumentTypes":null,"id":589,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"8312:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8307:7:0","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8318:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8307:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8297:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":606,"initializationExpression":{"expression":{"argumentTypes":null,"id":583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":581,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"8290:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"30","id":582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8294:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8290:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":584,"nodeType":"ExpressionStatement","src":"8290:5:0"},"loopExpression":{"expression":{"argumentTypes":null,"id":595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8321:3:0","subExpression":{"argumentTypes":null,"id":594,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"8321:1:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":596,"nodeType":"ExpressionStatement","src":"8321:3:0"},"nodeType":"ForStatement","src":"8285:99:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":609,"name":"bytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":575,"src":"8412:10:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":608,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8405:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":607,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8405:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":538,"id":611,"nodeType":"Return","src":"8398:25:0"}]}},"id":617,"nodeType":"IfStatement","src":"7996:484:0","trueBody":{"id":551,"nodeType":"Block","src":"8019:60:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":545,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"8052:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"components":[{"argumentTypes":null,"id":547,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8059:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":546,"name":"string","nodeType":"ElementaryTypeName","src":"8059:6:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}}],"id":548,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8058:8:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"}],"expression":{"argumentTypes":null,"id":543,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8041:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8041:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8041:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":538,"id":550,"nodeType":"Return","src":"8034:33:0"}]}}]},"documentation":null,"id":619,"implemented":true,"kind":"function","modifiers":[],"name":"returnDataToString","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":534,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":619,"src":"7928:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":533,"name":"bytes","nodeType":"ElementaryTypeName","src":"7928:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"7927:19:0"},"returnParameters":{"id":538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":537,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":619,"src":"7970:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":536,"name":"string","nodeType":"ElementaryTypeName","src":"7970:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"7969:15:0"},"scope":819,"src":"7900:587:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":649,"nodeType":"Block","src":"8765:176:0","statements":[{"assignments":[628,630],"declarations":[{"constant":false,"id":628,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":649,"src":"8777:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":627,"name":"bool","nodeType":"ElementaryTypeName","src":"8777:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":630,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":649,"src":"8791:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":629,"name":"bytes","nodeType":"ElementaryTypeName","src":"8791:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":641,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":638,"name":"SIG_SYMBOL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":520,"src":"8861:10:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"argumentTypes":null,"id":636,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8838:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8838:22:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8838:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":633,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"8820:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}],"id":632,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8812:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":631,"name":"address","nodeType":"ElementaryTypeName","src":"8812:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8812:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8812:25:0","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8812:61:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"8776:97:0"},{"expression":{"argumentTypes":null,"condition":{"argumentTypes":null,"id":642,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"8891:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"argumentTypes":null,"hexValue":"3f3f3f","id":646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8928:5:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ad68b4dd5516c9b8c2050c111c09e315e44fd13499c6724a87c1b4642b615187","typeString":"literal_string \"???\""},"value":"???"},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8891:42:0","trueExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":644,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"8920:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":643,"name":"returnDataToString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"8901:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8901:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":626,"id":648,"nodeType":"Return","src":"8884:49:0"}]},"documentation":{"id":620,"nodeType":"StructuredDocumentation","src":"8495:192:0","text":"@notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\n @param token The address of the ERC-20 token contract.\n @return (string) Token symbol."},"id":650,"implemented":true,"kind":"function","modifiers":[],"name":"safeSymbol","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":622,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":650,"src":"8713:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":621,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":517,"src":"8713:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"value":null,"visibility":"internal"}],"src":"8712:14:0"},"returnParameters":{"id":626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":625,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":650,"src":"8750:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":624,"name":"string","nodeType":"ElementaryTypeName","src":"8750:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"8749:15:0"},"scope":819,"src":"8693:248:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":680,"nodeType":"Block","src":"9213:174:0","statements":[{"assignments":[659,661],"declarations":[{"constant":false,"id":659,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":680,"src":"9225:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":658,"name":"bool","nodeType":"ElementaryTypeName","src":"9225:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":661,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":680,"src":"9239:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":660,"name":"bytes","nodeType":"ElementaryTypeName","src":"9239:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":672,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":669,"name":"SIG_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"9309:8:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"argumentTypes":null,"id":667,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9286:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9286:22:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9286:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":664,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"9268:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}],"id":663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9260:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":662,"name":"address","nodeType":"ElementaryTypeName","src":"9260:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9260:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9260:25:0","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9260:59:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"9224:95:0"},{"expression":{"argumentTypes":null,"condition":{"argumentTypes":null,"id":673,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":659,"src":"9337:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"argumentTypes":null,"hexValue":"3f3f3f","id":677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9374:5:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ad68b4dd5516c9b8c2050c111c09e315e44fd13499c6724a87c1b4642b615187","typeString":"literal_string \"???\""},"value":"???"},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9337:42:0","trueExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":675,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"9366:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":674,"name":"returnDataToString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"9347:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9347:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":657,"id":679,"nodeType":"Return","src":"9330:49:0"}]},"documentation":{"id":651,"nodeType":"StructuredDocumentation","src":"8949:188:0","text":"@notice Provides a safe ERC20.name version which returns '???' as fallback string.\n @param token The address of the ERC-20 token contract.\n @return (string) Token name."},"id":681,"implemented":true,"kind":"function","modifiers":[],"name":"safeName","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":653,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":681,"src":"9161:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":652,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":517,"src":"9161:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"value":null,"visibility":"internal"}],"src":"9160:14:0"},"returnParameters":{"id":657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":656,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":681,"src":"9198:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":655,"name":"string","nodeType":"ElementaryTypeName","src":"9198:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"9197:15:0"},"scope":819,"src":"9143:244:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":720,"nodeType":"Block","src":"9660:197:0","statements":[{"assignments":[690,692],"declarations":[{"constant":false,"id":690,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":720,"src":"9672:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":689,"name":"bool","nodeType":"ElementaryTypeName","src":"9672:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":720,"src":"9686:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":691,"name":"bytes","nodeType":"ElementaryTypeName","src":"9686:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":703,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":700,"name":"SIG_DECIMALS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"9756:12:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"argumentTypes":null,"id":698,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9733:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":699,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9733:22:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9733:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":695,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"9715:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}],"id":694,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9707:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":693,"name":"address","nodeType":"ElementaryTypeName","src":"9707:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9707:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9707:25:0","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9707:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"9671:99:0"},{"expression":{"argumentTypes":null,"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":704,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"9788:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":705,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"9799:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9799:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"3332","id":707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9814:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9799:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9788:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"argumentTypes":null,"hexValue":"3138","id":717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9847:2:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9788:61:0","trueExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":712,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":692,"src":"9830:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"components":[{"argumentTypes":null,"id":714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9837:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":713,"name":"uint8","nodeType":"ElementaryTypeName","src":"9837:5:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}}],"id":715,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"9836:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"expression":{"argumentTypes":null,"id":710,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9819:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":711,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9819:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9819:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":688,"id":719,"nodeType":"Return","src":"9781:68:0"}]},"documentation":{"id":682,"nodeType":"StructuredDocumentation","src":"9395:193:0","text":"@notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\n @param token The address of the ERC-20 token contract.\n @return (uint8) Token decimals."},"id":721,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecimals","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":684,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":721,"src":"9616:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":683,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":517,"src":"9616:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"value":null,"visibility":"internal"}],"src":"9615:14:0"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":687,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":721,"src":"9653:5:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":686,"name":"uint8","nodeType":"ElementaryTypeName","src":"9653:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"internal"}],"src":"9652:7:0"},"scope":819,"src":"9594:263:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":767,"nodeType":"Block","src":"10240:233:0","statements":[{"assignments":[732,734],"declarations":[{"constant":false,"id":732,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":767,"src":"10252:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":731,"name":"bool","nodeType":"ElementaryTypeName","src":"10252:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":734,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":767,"src":"10266:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":733,"name":"bytes","nodeType":"ElementaryTypeName","src":"10266:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":747,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":742,"name":"SIG_TRANSFER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"10330:12:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"argumentTypes":null,"id":743,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"10344:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":744,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"10348:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":740,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10307:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"10307:22:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10307:48:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":737,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"10295:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}],"id":736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10287:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":735,"name":"address","nodeType":"ElementaryTypeName","src":"10287:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10287:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","referencedDeclaration":null,"src":"10287:19:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10287:69:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"10251:105:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":749,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"10375:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":750,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"10387:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"10387:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10402:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10387:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":756,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":734,"src":"10418:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"components":[{"argumentTypes":null,"id":758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10425:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":757,"name":"bool","nodeType":"ElementaryTypeName","src":"10425:4:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}}],"id":759,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10424:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"argumentTypes":null,"id":754,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10407:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"10407:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10407:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10387:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":762,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10386:46:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10375:57:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e6745524332303a205472616e73666572206661696c6564","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10434:30:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27","typeString":"literal_string \"BoringERC20: Transfer failed\""},"value":"BoringERC20: Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1a3f0851ddc9e157ae96e52ed9dfd71a8cb4b1cf2a73b26b9f3f9e0aa9469d27","typeString":"literal_string \"BoringERC20: Transfer failed\""}],"id":748,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10367:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10367:98:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":766,"nodeType":"ExpressionStatement","src":"10367:98:0"}]},"documentation":{"id":722,"nodeType":"StructuredDocumentation","src":"9865:262:0","text":"@notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n Reverts on a failed transfer.\n @param token The address of the ERC-20 token.\n @param to Transfer tokens to.\n @param amount The token amount."},"id":768,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":768,"src":"10165:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":723,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":517,"src":"10165:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":726,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":768,"src":"10188:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":725,"name":"address","nodeType":"ElementaryTypeName","src":"10188:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":728,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":768,"src":"10209:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":727,"name":"uint256","nodeType":"ElementaryTypeName","src":"10209:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"10154:76:0"},"returnParameters":{"id":730,"nodeType":"ParameterList","parameters":[],"src":"10240:0:0"},"scope":819,"src":"10133:340:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":817,"nodeType":"Block","src":"10930:248:0","statements":[{"assignments":[781,783],"declarations":[{"constant":false,"id":781,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","overrides":null,"scope":817,"src":"10942:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":780,"name":"bool","nodeType":"ElementaryTypeName","src":"10942:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":783,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","overrides":null,"scope":817,"src":"10956:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":782,"name":"bytes","nodeType":"ElementaryTypeName","src":"10956:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"id":797,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":791,"name":"SIG_TRANSFER_FROM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"11020:17:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"argumentTypes":null,"id":792,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"11039:4:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":793,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"11045:2:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":794,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"11049:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":789,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10997:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":790,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","referencedDeclaration":null,"src":"10997:22:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10997:59:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":786,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"10985:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}],"id":785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10977:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":784,"name":"address","nodeType":"ElementaryTypeName","src":"10977:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10977:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","referencedDeclaration":null,"src":"10977:19:0","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10977:80:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"10941:116:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":799,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"11076:7:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"components":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":800,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11088:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","referencedDeclaration":null,"src":"11088:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11103:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11088:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":806,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"11119:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"argumentTypes":null,"components":[{"argumentTypes":null,"id":808,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11126:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":807,"name":"bool","nodeType":"ElementaryTypeName","src":"11126:4:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}}],"id":809,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"11125:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"argumentTypes":null,"id":804,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"11108:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","referencedDeclaration":null,"src":"11108:10:0","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11108:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11088:44:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":812,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11087:46:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11076:57:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"426f72696e6745524332303a205472616e7366657246726f6d206661696c6564","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11135:34:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26","typeString":"literal_string \"BoringERC20: TransferFrom failed\""},"value":"BoringERC20: TransferFrom failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dffd2f381f9235cb5927387124071d63a91c90f587c3edae76629d7dc4794f26","typeString":"literal_string \"BoringERC20: TransferFrom failed\""}],"id":798,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11068:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11068:102:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":816,"nodeType":"ExpressionStatement","src":"11068:102:0"}]},"documentation":{"id":769,"nodeType":"StructuredDocumentation","src":"10481:309:0","text":"@notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n Reverts on a failed transfer.\n @param token The address of the ERC-20 token.\n @param from Transfer tokens from.\n @param to Transfer tokens to.\n @param amount The token amount."},"id":818,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":771,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","overrides":null,"scope":818,"src":"10832:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":770,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":517,"src":"10832:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"value":null,"visibility":"internal"},{"constant":false,"id":773,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","overrides":null,"scope":818,"src":"10855:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":772,"name":"address","nodeType":"ElementaryTypeName","src":"10855:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":775,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","overrides":null,"scope":818,"src":"10878:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":774,"name":"address","nodeType":"ElementaryTypeName","src":"10878:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":818,"src":"10899:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"10899:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"10821:99:0"},"returnParameters":{"id":779,"nodeType":"ParameterList","parameters":[],"src":"10930:0:0"},"scope":819,"src":"10796:382:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1106,"src":"7486:3695:0"},{"abstract":false,"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":820,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":517,"src":"11286:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"id":821,"nodeType":"InheritanceSpecifier","src":"11286:6:0"}],"contractDependencies":[517],"contractKind":"interface","documentation":null,"fullyImplemented":false,"id":832,"linearizedBaseContracts":[832,517],"name":"ISushiBar","nodeType":"ContractDefinition","nodes":[{"body":null,"documentation":null,"functionSelector":"a59f3e0c","id":826,"implemented":false,"kind":"function","modifiers":[],"name":"enter","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":823,"mutability":"mutable","name":"_amount","nodeType":"VariableDeclaration","overrides":null,"scope":826,"src":"11315:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":822,"name":"uint256","nodeType":"ElementaryTypeName","src":"11315:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11314:17:0"},"returnParameters":{"id":825,"nodeType":"ParameterList","parameters":[],"src":"11340:0:0"},"scope":832,"src":"11300:41:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":null,"documentation":null,"functionSelector":"67dfd4c9","id":831,"implemented":false,"kind":"function","modifiers":[],"name":"leave","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":828,"mutability":"mutable","name":"_share","nodeType":"VariableDeclaration","overrides":null,"scope":831,"src":"11364:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":827,"name":"uint256","nodeType":"ElementaryTypeName","src":"11364:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11363:16:0"},"returnParameters":{"id":830,"nodeType":"ParameterList","parameters":[],"src":"11388:0:0"},"scope":832,"src":"11349:40:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1106,"src":"11263:129:0"},{"abstract":false,"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":833,"name":"IStrategy","nodeType":"UserDefinedTypeName","referencedDeclaration":34,"src":"11424:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_IStrategy_$34","typeString":"contract IStrategy"}},"id":834,"nodeType":"InheritanceSpecifier","src":"11424:9:0"},{"arguments":null,"baseName":{"contractScope":null,"id":835,"name":"BoringOwnable","nodeType":"UserDefinedTypeName","referencedDeclaration":162,"src":"11435:13:0","typeDescriptions":{"typeIdentifier":"t_contract$_BoringOwnable_$162","typeString":"contract BoringOwnable"}},"id":836,"nodeType":"InheritanceSpecifier","src":"11435:13:0"}],"contractDependencies":[34,39,162],"contractKind":"contract","documentation":null,"fullyImplemented":true,"id":1105,"linearizedBaseContracts":[1105,162,39,34],"name":"SushiStrategyV1","nodeType":"ContractDefinition","nodes":[{"id":839,"libraryName":{"contractScope":null,"id":837,"name":"BoringMath","nodeType":"UserDefinedTypeName","referencedDeclaration":314,"src":"11462:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_BoringMath_$314","typeString":"library BoringMath"}},"nodeType":"UsingForDirective","src":"11456:29:0","typeName":{"id":838,"name":"uint256","nodeType":"ElementaryTypeName","src":"11477:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"id":842,"libraryName":{"contractScope":null,"id":840,"name":"BoringERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":819,"src":"11497:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_BoringERC20_$819","typeString":"library BoringERC20"}},"nodeType":"UsingForDirective","src":"11491:29:0","typeName":{"contractScope":null,"id":841,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":517,"src":"11513:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}}},{"constant":false,"id":844,"mutability":"immutable","name":"sushi","nodeType":"VariableDeclaration","overrides":null,"scope":1105,"src":"11528:30:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":843,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":517,"src":"11528:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"value":null,"visibility":"private"},{"constant":false,"id":846,"mutability":"immutable","name":"bar","nodeType":"VariableDeclaration","overrides":null,"scope":1105,"src":"11565:31:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"},"typeName":{"contractScope":null,"id":845,"name":"ISushiBar","nodeType":"UserDefinedTypeName","referencedDeclaration":832,"src":"11565:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"value":null,"visibility":"private"},{"body":{"id":861,"nodeType":"Block","src":"11655:54:0","statements":[{"expression":{"argumentTypes":null,"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":853,"name":"bar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"11666:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":854,"name":"bar_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"11672:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"src":"11666:10:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"id":856,"nodeType":"ExpressionStatement","src":"11666:10:0"},{"expression":{"argumentTypes":null,"id":859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":857,"name":"sushi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"11687:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":858,"name":"sushi_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":850,"src":"11695:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"src":"11687:14:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"id":860,"nodeType":"ExpressionStatement","src":"11687:14:0"}]},"documentation":null,"id":862,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","overrides":null,"parameters":{"id":851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":848,"mutability":"mutable","name":"bar_","nodeType":"VariableDeclaration","overrides":null,"scope":862,"src":"11617:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"},"typeName":{"contractScope":null,"id":847,"name":"ISushiBar","nodeType":"UserDefinedTypeName","referencedDeclaration":832,"src":"11617:9:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"value":null,"visibility":"internal"},{"constant":false,"id":850,"mutability":"mutable","name":"sushi_","nodeType":"VariableDeclaration","overrides":null,"scope":862,"src":"11633:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"},"typeName":{"contractScope":null,"id":849,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":517,"src":"11633:6:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"value":null,"visibility":"internal"}],"src":"11616:31:0"},"returnParameters":{"id":852,"nodeType":"ParameterList","parameters":[],"src":"11655:0:0"},"scope":1105,"src":"11605:104:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[7],"body":{"id":885,"nodeType":"Block","src":"11865:82:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":874,"name":"bar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"11898:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}],"id":873,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11890:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":872,"name":"address","nodeType":"ElementaryTypeName","src":"11890:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11890:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":876,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"11904:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":869,"name":"sushi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"11876:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"id":871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":482,"src":"11876:13:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11876:35:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":878,"nodeType":"ExpressionStatement","src":"11876:35:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":882,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"11932:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":879,"name":"bar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"11922:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"id":881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"enter","nodeType":"MemberAccess","referencedDeclaration":826,"src":"11922:9:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11922:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":884,"nodeType":"ExpressionStatement","src":"11922:17:0"}]},"documentation":{"id":863,"nodeType":"StructuredDocumentation","src":"11786:25:0","text":"@inheritdoc IStrategy"},"functionSelector":"6939aaf5","id":886,"implemented":true,"kind":"function","modifiers":[],"name":"skim","nodeType":"FunctionDefinition","overrides":{"id":867,"nodeType":"OverrideSpecifier","overrides":[],"src":"11856:8:0"},"parameters":{"id":866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":865,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":886,"src":"11831:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":864,"name":"uint256","nodeType":"ElementaryTypeName","src":"11831:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11830:16:0"},"returnParameters":{"id":868,"nodeType":"ParameterList","parameters":[],"src":"11865:0:0"},"scope":1105,"src":"11817:130:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[17],"body":{"id":970,"nodeType":"Block","src":"12170:468:0","statements":[{"assignments":[900],"declarations":[{"constant":false,"id":900,"mutability":"mutable","name":"share","nodeType":"VariableDeclaration","overrides":null,"scope":970,"src":"12181:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":899,"name":"uint256","nodeType":"ElementaryTypeName","src":"12181:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":908,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":905,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12219:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_SushiStrategyV1_$1105","typeString":"contract SushiStrategyV1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiStrategyV1_$1105","typeString":"contract SushiStrategyV1"}],"id":904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12211:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":903,"name":"address","nodeType":"ElementaryTypeName","src":"12211:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12211:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":901,"name":"bar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"12197:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":464,"src":"12197:13:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12197:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12181:44:0"},{"assignments":[910],"declarations":[{"constant":false,"id":910,"mutability":"mutable","name":"totalShares","nodeType":"VariableDeclaration","overrides":null,"scope":970,"src":"12236:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":909,"name":"uint256","nodeType":"ElementaryTypeName","src":"12236:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":914,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":911,"name":"bar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"12258:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":457,"src":"12258:15:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12258:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12236:39:0"},{"assignments":[916],"declarations":[{"constant":false,"id":916,"mutability":"mutable","name":"totalSushi","nodeType":"VariableDeclaration","overrides":null,"scope":970,"src":"12286:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":915,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":924,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":921,"name":"bar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"12331:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}],"id":920,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12323:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":919,"name":"address","nodeType":"ElementaryTypeName","src":"12323:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12323:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":917,"name":"sushi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"12307:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"id":918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":464,"src":"12307:15:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12307:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12286:50:0"},{"assignments":[926],"declarations":[{"constant":false,"id":926,"mutability":"mutable","name":"keepShare","nodeType":"VariableDeclaration","overrides":null,"scope":970,"src":"12347:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":925,"name":"uint256","nodeType":"ElementaryTypeName","src":"12347:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":933,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":929,"name":"totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"12379:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":927,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"12367:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":235,"src":"12367:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12367:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":931,"name":"totalSushi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"12394:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12367:37:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12347:57:0"},{"assignments":[935],"declarations":[{"constant":false,"id":935,"mutability":"mutable","name":"harvestShare","nodeType":"VariableDeclaration","overrides":null,"scope":970,"src":"12415:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":934,"name":"uint256","nodeType":"ElementaryTypeName","src":"12415:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":940,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":938,"name":"keepShare","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"12448:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":936,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"12438:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":207,"src":"12438:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12438:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12415:43:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":944,"name":"harvestShare","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"12479:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":941,"name":"bar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"12469:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"leave","nodeType":"MemberAccess","referencedDeclaration":831,"src":"12469:9:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12469:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":946,"nodeType":"ExpressionStatement","src":"12469:23:0"},{"expression":{"argumentTypes":null,"id":958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":947,"name":"amountAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"12503:11:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":954,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12548:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_SushiStrategyV1_$1105","typeString":"contract SushiStrategyV1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiStrategyV1_$1105","typeString":"contract SushiStrategyV1"}],"id":953,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12540:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":952,"name":"address","nodeType":"ElementaryTypeName","src":"12540:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12540:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":950,"name":"sushi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"12524:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":464,"src":"12524:15:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12524:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":949,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12517:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":948,"name":"int256","nodeType":"ElementaryTypeName","src":"12517:6:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12517:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"12503:52:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":959,"nodeType":"ExpressionStatement","src":"12503:52:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":963,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"12585:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":966,"name":"amountAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"12600:11:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12592:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":964,"name":"uint256","nodeType":"ElementaryTypeName","src":"12592:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12592:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":960,"name":"sushi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"12566:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":768,"src":"12566:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$517_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$517_$","typeString":"function (contract IERC20,address,uint256)"}},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12566:47:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":969,"nodeType":"ExpressionStatement","src":"12566:47:0"}]},"documentation":{"id":887,"nodeType":"StructuredDocumentation","src":"12039:25:0","text":"@inheritdoc IStrategy"},"functionSelector":"18fccc76","id":971,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":895,"modifierName":{"argumentTypes":null,"id":894,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"12131:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"12131:9:0"}],"name":"harvest","nodeType":"FunctionDefinition","overrides":{"id":893,"nodeType":"OverrideSpecifier","overrides":[],"src":"12122:8:0"},"parameters":{"id":892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":889,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","overrides":null,"scope":971,"src":"12087:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":888,"name":"uint256","nodeType":"ElementaryTypeName","src":"12087:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":891,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","overrides":null,"scope":971,"src":"12104:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":890,"name":"address","nodeType":"ElementaryTypeName","src":"12104:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"12086:26:0"},"returnParameters":{"id":898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":897,"mutability":"mutable","name":"amountAdded","nodeType":"VariableDeclaration","overrides":null,"scope":971,"src":"12150:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":896,"name":"int256","nodeType":"ElementaryTypeName","src":"12150:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":null,"visibility":"internal"}],"src":"12149:20:0"},"scope":1105,"src":"12070:568:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[25],"body":{"id":1049,"nodeType":"Block","src":"12910:471:0","statements":[{"assignments":[983],"declarations":[{"constant":false,"id":983,"mutability":"mutable","name":"totalShares","nodeType":"VariableDeclaration","overrides":null,"scope":1049,"src":"12921:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"12921:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":987,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":984,"name":"bar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"12943:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":457,"src":"12943:15:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12943:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12921:39:0"},{"assignments":[989],"declarations":[{"constant":false,"id":989,"mutability":"mutable","name":"totalSushi","nodeType":"VariableDeclaration","overrides":null,"scope":1049,"src":"12971:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":988,"name":"uint256","nodeType":"ElementaryTypeName","src":"12971:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":997,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":994,"name":"bar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"13016:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}],"id":993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13008:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":992,"name":"address","nodeType":"ElementaryTypeName","src":"13008:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13008:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":990,"name":"sushi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"12992:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":464,"src":"12992:15:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12992:29:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12971:50:0"},{"assignments":[999],"declarations":[{"constant":false,"id":999,"mutability":"mutable","name":"withdrawShare","nodeType":"VariableDeclaration","overrides":null,"scope":1049,"src":"13032:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":998,"name":"uint256","nodeType":"ElementaryTypeName","src":"13032:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1006,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1002,"name":"totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"13067:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1000,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"13056:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mul","nodeType":"MemberAccess","referencedDeclaration":235,"src":"13056:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13056:23:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":1004,"name":"totalSushi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"13082:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13056:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13032:60:0"},{"assignments":[1008],"declarations":[{"constant":false,"id":1008,"mutability":"mutable","name":"share","nodeType":"VariableDeclaration","overrides":null,"scope":1049,"src":"13103:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1007,"name":"uint256","nodeType":"ElementaryTypeName","src":"13103:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1016,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1013,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"13141:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_SushiStrategyV1_$1105","typeString":"contract SushiStrategyV1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiStrategyV1_$1105","typeString":"contract SushiStrategyV1"}],"id":1012,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13133:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1011,"name":"address","nodeType":"ElementaryTypeName","src":"13133:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13133:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":1009,"name":"bar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"13119:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":464,"src":"13119:13:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13119:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13103:44:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1017,"name":"withdrawShare","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"13162:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"id":1018,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"13178:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13162:21:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1025,"nodeType":"IfStatement","src":"13158:75:0","trueBody":{"id":1024,"nodeType":"Block","src":"13185:48:0","statements":[{"expression":{"argumentTypes":null,"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1020,"name":"withdrawShare","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"13200:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1021,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"13216:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13200:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1023,"nodeType":"ExpressionStatement","src":"13200:21:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1029,"name":"withdrawShare","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"13253:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1026,"name":"bar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"13243:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"leave","nodeType":"MemberAccess","referencedDeclaration":831,"src":"13243:9:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13243:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1031,"nodeType":"ExpressionStatement","src":"13243:24:0"},{"expression":{"argumentTypes":null,"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1032,"name":"actualAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"13278:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1037,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"13317:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_SushiStrategyV1_$1105","typeString":"contract SushiStrategyV1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiStrategyV1_$1105","typeString":"contract SushiStrategyV1"}],"id":1036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13309:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1035,"name":"address","nodeType":"ElementaryTypeName","src":"13309:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13309:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":1033,"name":"sushi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"13293:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":464,"src":"13293:15:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13293:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13278:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1041,"nodeType":"ExpressionStatement","src":"13278:45:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1045,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"13353:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1046,"name":"actualAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"13360:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1042,"name":"sushi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"13334:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":768,"src":"13334:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$517_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$517_$","typeString":"function (contract IERC20,address,uint256)"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13334:39:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1048,"nodeType":"ExpressionStatement","src":"13334:39:0"}]},"documentation":{"id":972,"nodeType":"StructuredDocumentation","src":"12786:25:0","text":"@inheritdoc IStrategy"},"functionSelector":"2e1a7d4d","id":1050,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":978,"modifierName":{"argumentTypes":null,"id":977,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"12869:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"12869:9:0"}],"name":"withdraw","nodeType":"FunctionDefinition","overrides":{"id":976,"nodeType":"OverrideSpecifier","overrides":[],"src":"12860:8:0"},"parameters":{"id":975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1050,"src":"12835:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":973,"name":"uint256","nodeType":"ElementaryTypeName","src":"12835:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"12834:16:0"},"returnParameters":{"id":981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":980,"mutability":"mutable","name":"actualAmount","nodeType":"VariableDeclaration","overrides":null,"scope":1050,"src":"12888:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":979,"name":"uint256","nodeType":"ElementaryTypeName","src":"12888:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"12887:22:0"},"scope":1105,"src":"12817:564:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[33],"body":{"id":1103,"nodeType":"Block","src":"13585:241:0","statements":[{"assignments":[1062],"declarations":[{"constant":false,"id":1062,"mutability":"mutable","name":"share","nodeType":"VariableDeclaration","overrides":null,"scope":1103,"src":"13596:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1061,"name":"uint256","nodeType":"ElementaryTypeName","src":"13596:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1070,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1067,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"13634:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_SushiStrategyV1_$1105","typeString":"contract SushiStrategyV1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiStrategyV1_$1105","typeString":"contract SushiStrategyV1"}],"id":1066,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13626:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1065,"name":"address","nodeType":"ElementaryTypeName","src":"13626:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13626:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":1063,"name":"bar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"13612:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":464,"src":"13612:13:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13612:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13596:44:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1074,"name":"share","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"13661:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1071,"name":"bar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"13651:3:0","typeDescriptions":{"typeIdentifier":"t_contract$_ISushiBar_$832","typeString":"contract ISushiBar"}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"leave","nodeType":"MemberAccess","referencedDeclaration":831,"src":"13651:9:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13651:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1076,"nodeType":"ExpressionStatement","src":"13651:16:0"},{"assignments":[1078],"declarations":[{"constant":false,"id":1078,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","overrides":null,"scope":1103,"src":"13678:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1077,"name":"uint256","nodeType":"ElementaryTypeName","src":"13678:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1086,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1083,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"13719:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_SushiStrategyV1_$1105","typeString":"contract SushiStrategyV1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SushiStrategyV1_$1105","typeString":"contract SushiStrategyV1"}],"id":1082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13711:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1081,"name":"address","nodeType":"ElementaryTypeName","src":"13711:7:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13711:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":1079,"name":"sushi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"13695:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":464,"src":"13695:15:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13695:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13678:47:0"},{"expression":{"argumentTypes":null,"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1087,"name":"amountAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"13736:11:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1090,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"13757:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":1091,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"13766:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13757:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1089,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13750:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1088,"name":"int256","nodeType":"ElementaryTypeName","src":"13750:6:0","typeDescriptions":{"typeIdentifier":null,"typeString":null}}},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13750:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"13736:38:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1095,"nodeType":"ExpressionStatement","src":"13736:38:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1099,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"13804:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1100,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"13811:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1096,"name":"sushi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"13785:5:0","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$517","typeString":"contract IERC20"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":768,"src":"13785:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$517_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$517_$","typeString":"function (contract IERC20,address,uint256)"}},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13785:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1102,"nodeType":"ExpressionStatement","src":"13785:33:0"}]},"documentation":{"id":1051,"nodeType":"StructuredDocumentation","src":"13466:25:0","text":"@inheritdoc IStrategy"},"functionSelector":"7f8661a1","id":1104,"implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1057,"modifierName":{"argumentTypes":null,"id":1056,"name":"onlyOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"13546:9:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"13546:9:0"}],"name":"exit","nodeType":"FunctionDefinition","overrides":{"id":1055,"nodeType":"OverrideSpecifier","overrides":[],"src":"13537:8:0"},"parameters":{"id":1054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1053,"mutability":"mutable","name":"balance","nodeType":"VariableDeclaration","overrides":null,"scope":1104,"src":"13511:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1052,"name":"uint256","nodeType":"ElementaryTypeName","src":"13511:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"13510:17:0"},"returnParameters":{"id":1060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1059,"mutability":"mutable","name":"amountAdded","nodeType":"VariableDeclaration","overrides":null,"scope":1104,"src":"13565:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1058,"name":"int256","nodeType":"ElementaryTypeName","src":"13565:6:0","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"value":null,"visibility":"internal"}],"src":"13564:20:0"},"scope":1105,"src":"13497:329:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1106,"src":"11396:2433:0"}],"src":"33:13798:0"},"id":0}},"contracts":{"contracts/flat/SushiStrategyFlat.sol":{"BoringERC20":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122038d342a2dbbb2491980a86077a4c7c06fc458994f22b6d8ef7cd8b65dbc7d03864736f6c634300060c0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE 0xD3 TIMESTAMP LOG2 0xDB 0xBB 0x24 SWAP2 SWAP9 EXP DUP7 SMOD PUSH27 0x4C7C06FC458994F22B6D8EF7CD8B65DBC7D03864736F6C63430006 0xC STOP CALLER ","sourceMap":"7486:3695:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122038d342a2dbbb2491980a86077a4c7c06fc458994f22b6d8ef7cd8b65dbc7d03864736f6c634300060c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE 0xD3 TIMESTAMP LOG2 0xDB 0xBB 0x24 SWAP2 SWAP9 EXP DUP7 SMOD PUSH27 0x4C7C06FC458994F22B6D8EF7CD8B65DBC7D03864736F6C63430006 0xC STOP CALLER ","sourceMap":"7486:3695:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"returnDataToString(bytes memory)":"infinite","safeDecimals(contract IERC20)":"infinite","safeName(contract IERC20)":"infinite","safeSymbol(contract IERC20)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/SushiStrategyFlat.sol\":\"BoringERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":256},\"remappings\":[]},\"sources\":{\"contracts/flat/SushiStrategyFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable not-rely-on-time\\r\\n\\r\\n// File contracts/interfaces/IStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IStrategy {\\r\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\r\\n    /// @param amount The amount of tokens to invest.\\r\\n    function skim(uint256 amount) external;\\r\\n\\r\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\r\\n\\r\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\r\\n    /// @dev The `actualAmount` should be very close to the amount.\\r\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\r\\n    /// @param amount The requested amount the caller wants to withdraw.\\r\\n    /// @return actualAmount The real amount that is withdrawn.\\r\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\r\\n\\r\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\r\\n// Edited by BoringCrypto\\r\\n\\r\\ncontract BoringOwnableData {\\r\\n    address public owner;\\r\\n    address public pendingOwner;\\r\\n}\\r\\n\\r\\ncontract BoringOwnable is BoringOwnableData {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice `owner` defaults to msg.sender on construction.\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\r\\n    /// Can only be invoked by the current `owner`.\\r\\n    /// @param newOwner Address of the new owner.\\r\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\r\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) public onlyOwner {\\r\\n        if (direct) {\\r\\n            // Checks\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            // Effects\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n            pendingOwner = address(0);\\r\\n        } else {\\r\\n            // Effects\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n\\r\\n        // Checks\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        // Effects\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Only allows the `owner` to execute the function.\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe math,\\r\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File contracts/strategies/SushiStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface ISushiBar is IERC20 {\\r\\n    function enter(uint256 _amount) external;\\r\\n\\r\\n    function leave(uint256 _share) external;\\r\\n}\\r\\n\\r\\ncontract SushiStrategyV1 is IStrategy, BoringOwnable {\\r\\n    using BoringMath for uint256;\\r\\n    using BoringERC20 for IERC20;\\r\\n\\r\\n    IERC20 private immutable sushi;\\r\\n    ISushiBar private immutable bar;\\r\\n\\r\\n    constructor(ISushiBar bar_, IERC20 sushi_) public {\\r\\n        bar = bar_;\\r\\n        sushi = sushi_;\\r\\n    }\\r\\n\\r\\n    // Send the assets to the Strategy and call skim to invest them\\r\\n    /// @inheritdoc IStrategy\\r\\n    function skim(uint256 amount) external override {\\r\\n        sushi.approve(address(bar), amount);\\r\\n        bar.enter(amount);\\r\\n    }\\r\\n\\r\\n    // Harvest any profits made converted to the asset and pass them to the caller\\r\\n    /// @inheritdoc IStrategy\\r\\n    function harvest(uint256 balance, address) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 keepShare = balance.mul(totalShares) / totalSushi;\\r\\n        uint256 harvestShare = share.sub(keepShare);\\r\\n        bar.leave(harvestShare);\\r\\n        amountAdded = int256(sushi.balanceOf(address(this)));\\r\\n        sushi.safeTransfer(owner, uint256(amountAdded)); // Add as profit\\r\\n    }\\r\\n\\r\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding or if the request was more than there is.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function withdraw(uint256 amount) external override onlyOwner returns (uint256 actualAmount) {\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 withdrawShare = amount.mul(totalShares) / totalSushi;\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        if (withdrawShare > share) {\\r\\n            withdrawShare = share;\\r\\n        }\\r\\n        bar.leave(withdrawShare);\\r\\n        actualAmount = sushi.balanceOf(address(this));\\r\\n        sushi.safeTransfer(owner, actualAmount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function exit(uint256 balance) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        bar.leave(share);\\r\\n        uint256 amount = sushi.balanceOf(address(this));\\r\\n        amountAdded = int256(amount - balance);\\r\\n        sushi.safeTransfer(owner, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde08dfa320b1673a0fe8574910273ad35ef10aa284095acf1e504c1b8d21c33c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"BoringMath":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f1dc4dae4f6ce5c593b24070af8672561e90eacf3ec0725c449b7d7dc8cea5a364736f6c634300060c0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0xDC 0x4D 0xAE 0x4F PUSH13 0xE5C593B24070AF8672561E90EA 0xCF RETURNDATACOPY 0xC0 PUSH19 0x5C449B7D7DC8CEA5A364736F6C634300060C00 CALLER ","sourceMap":"4309:976:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f1dc4dae4f6ce5c593b24070af8672561e90eacf3ec0725c449b7d7dc8cea5a364736f6c634300060c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL 0xDC 0x4D 0xAE 0x4F PUSH13 0xE5C593B24070AF8672561E90EA 0xCF RETURNDATACOPY 0xC0 PUSH19 0x5C449B7D7DC8CEA5A364736F6C634300060C00 CALLER ","sourceMap":"4309:976:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint256,uint256)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","to128(uint256)":"infinite","to32(uint256)":"infinite","to64(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for performing overflow-/underflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/SushiStrategyFlat.sol\":\"BoringMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":256},\"remappings\":[]},\"sources\":{\"contracts/flat/SushiStrategyFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable not-rely-on-time\\r\\n\\r\\n// File contracts/interfaces/IStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IStrategy {\\r\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\r\\n    /// @param amount The amount of tokens to invest.\\r\\n    function skim(uint256 amount) external;\\r\\n\\r\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\r\\n\\r\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\r\\n    /// @dev The `actualAmount` should be very close to the amount.\\r\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\r\\n    /// @param amount The requested amount the caller wants to withdraw.\\r\\n    /// @return actualAmount The real amount that is withdrawn.\\r\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\r\\n\\r\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\r\\n// Edited by BoringCrypto\\r\\n\\r\\ncontract BoringOwnableData {\\r\\n    address public owner;\\r\\n    address public pendingOwner;\\r\\n}\\r\\n\\r\\ncontract BoringOwnable is BoringOwnableData {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice `owner` defaults to msg.sender on construction.\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\r\\n    /// Can only be invoked by the current `owner`.\\r\\n    /// @param newOwner Address of the new owner.\\r\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\r\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) public onlyOwner {\\r\\n        if (direct) {\\r\\n            // Checks\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            // Effects\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n            pendingOwner = address(0);\\r\\n        } else {\\r\\n            // Effects\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n\\r\\n        // Checks\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        // Effects\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Only allows the `owner` to execute the function.\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe math,\\r\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File contracts/strategies/SushiStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface ISushiBar is IERC20 {\\r\\n    function enter(uint256 _amount) external;\\r\\n\\r\\n    function leave(uint256 _share) external;\\r\\n}\\r\\n\\r\\ncontract SushiStrategyV1 is IStrategy, BoringOwnable {\\r\\n    using BoringMath for uint256;\\r\\n    using BoringERC20 for IERC20;\\r\\n\\r\\n    IERC20 private immutable sushi;\\r\\n    ISushiBar private immutable bar;\\r\\n\\r\\n    constructor(ISushiBar bar_, IERC20 sushi_) public {\\r\\n        bar = bar_;\\r\\n        sushi = sushi_;\\r\\n    }\\r\\n\\r\\n    // Send the assets to the Strategy and call skim to invest them\\r\\n    /// @inheritdoc IStrategy\\r\\n    function skim(uint256 amount) external override {\\r\\n        sushi.approve(address(bar), amount);\\r\\n        bar.enter(amount);\\r\\n    }\\r\\n\\r\\n    // Harvest any profits made converted to the asset and pass them to the caller\\r\\n    /// @inheritdoc IStrategy\\r\\n    function harvest(uint256 balance, address) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 keepShare = balance.mul(totalShares) / totalSushi;\\r\\n        uint256 harvestShare = share.sub(keepShare);\\r\\n        bar.leave(harvestShare);\\r\\n        amountAdded = int256(sushi.balanceOf(address(this)));\\r\\n        sushi.safeTransfer(owner, uint256(amountAdded)); // Add as profit\\r\\n    }\\r\\n\\r\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding or if the request was more than there is.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function withdraw(uint256 amount) external override onlyOwner returns (uint256 actualAmount) {\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 withdrawShare = amount.mul(totalShares) / totalSushi;\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        if (withdrawShare > share) {\\r\\n            withdrawShare = share;\\r\\n        }\\r\\n        bar.leave(withdrawShare);\\r\\n        actualAmount = sushi.balanceOf(address(this));\\r\\n        sushi.safeTransfer(owner, actualAmount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function exit(uint256 balance) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        bar.leave(share);\\r\\n        uint256 amount = sushi.balanceOf(address(this));\\r\\n        amountAdded = int256(amount - balance);\\r\\n        sushi.safeTransfer(owner, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde08dfa320b1673a0fe8574910273ad35ef10aa284095acf1e504c1b8d21c33c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A library for performing overflow-/underflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).","version":1}},"BoringMath128":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207195fd2a2fb28d5e9773c405996dcb5b8e024e5c684e71a138e6d6e80f50471964736f6c634300060c0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x95FD2A2FB28D5E9773C405996DCB5B8E024E 0x5C PUSH9 0x4E71A138E6D6E80F50 SELFBALANCE NOT PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"5389:319:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207195fd2a2fb28d5e9773c405996dcb5b8e024e5c684e71a138e6d6e80f50471964736f6c634300060c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x95FD2A2FB28D5E9773C405996DCB5B8E024E 0x5C PUSH9 0x4E71A138E6D6E80F50 SELFBALANCE NOT PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"5389:319:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint128,uint128)":"infinite","sub(uint128,uint128)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for performing overflow-/underflow-safe addition and subtraction on uint128.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/SushiStrategyFlat.sol\":\"BoringMath128\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":256},\"remappings\":[]},\"sources\":{\"contracts/flat/SushiStrategyFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable not-rely-on-time\\r\\n\\r\\n// File contracts/interfaces/IStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IStrategy {\\r\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\r\\n    /// @param amount The amount of tokens to invest.\\r\\n    function skim(uint256 amount) external;\\r\\n\\r\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\r\\n\\r\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\r\\n    /// @dev The `actualAmount` should be very close to the amount.\\r\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\r\\n    /// @param amount The requested amount the caller wants to withdraw.\\r\\n    /// @return actualAmount The real amount that is withdrawn.\\r\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\r\\n\\r\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\r\\n// Edited by BoringCrypto\\r\\n\\r\\ncontract BoringOwnableData {\\r\\n    address public owner;\\r\\n    address public pendingOwner;\\r\\n}\\r\\n\\r\\ncontract BoringOwnable is BoringOwnableData {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice `owner` defaults to msg.sender on construction.\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\r\\n    /// Can only be invoked by the current `owner`.\\r\\n    /// @param newOwner Address of the new owner.\\r\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\r\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) public onlyOwner {\\r\\n        if (direct) {\\r\\n            // Checks\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            // Effects\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n            pendingOwner = address(0);\\r\\n        } else {\\r\\n            // Effects\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n\\r\\n        // Checks\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        // Effects\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Only allows the `owner` to execute the function.\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe math,\\r\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File contracts/strategies/SushiStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface ISushiBar is IERC20 {\\r\\n    function enter(uint256 _amount) external;\\r\\n\\r\\n    function leave(uint256 _share) external;\\r\\n}\\r\\n\\r\\ncontract SushiStrategyV1 is IStrategy, BoringOwnable {\\r\\n    using BoringMath for uint256;\\r\\n    using BoringERC20 for IERC20;\\r\\n\\r\\n    IERC20 private immutable sushi;\\r\\n    ISushiBar private immutable bar;\\r\\n\\r\\n    constructor(ISushiBar bar_, IERC20 sushi_) public {\\r\\n        bar = bar_;\\r\\n        sushi = sushi_;\\r\\n    }\\r\\n\\r\\n    // Send the assets to the Strategy and call skim to invest them\\r\\n    /// @inheritdoc IStrategy\\r\\n    function skim(uint256 amount) external override {\\r\\n        sushi.approve(address(bar), amount);\\r\\n        bar.enter(amount);\\r\\n    }\\r\\n\\r\\n    // Harvest any profits made converted to the asset and pass them to the caller\\r\\n    /// @inheritdoc IStrategy\\r\\n    function harvest(uint256 balance, address) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 keepShare = balance.mul(totalShares) / totalSushi;\\r\\n        uint256 harvestShare = share.sub(keepShare);\\r\\n        bar.leave(harvestShare);\\r\\n        amountAdded = int256(sushi.balanceOf(address(this)));\\r\\n        sushi.safeTransfer(owner, uint256(amountAdded)); // Add as profit\\r\\n    }\\r\\n\\r\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding or if the request was more than there is.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function withdraw(uint256 amount) external override onlyOwner returns (uint256 actualAmount) {\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 withdrawShare = amount.mul(totalShares) / totalSushi;\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        if (withdrawShare > share) {\\r\\n            withdrawShare = share;\\r\\n        }\\r\\n        bar.leave(withdrawShare);\\r\\n        actualAmount = sushi.balanceOf(address(this));\\r\\n        sushi.safeTransfer(owner, actualAmount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function exit(uint256 balance) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        bar.leave(share);\\r\\n        uint256 amount = sushi.balanceOf(address(this));\\r\\n        amountAdded = int256(amount - balance);\\r\\n        sushi.safeTransfer(owner, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde08dfa320b1673a0fe8574910273ad35ef10aa284095acf1e504c1b8d21c33c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A library for performing overflow-/underflow-safe addition and subtraction on uint128.","version":1}},"BoringMath32":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205efd7e278792f8dfb685f136a7ebf2b2e98c43da18a0ceafd7519296c303861e64736f6c634300060c0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5E REVERT PUSH31 0x278792F8DFB685F136A7EBF2B2E98C43DA18A0CEAFD7519296C303861E6473 PUSH16 0x6C634300060C00330000000000000000 ","sourceMap":"6226:312:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205efd7e278792f8dfb685f136a7ebf2b2e98c43da18a0ceafd7519296c303861e64736f6c634300060c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5E REVERT PUSH31 0x278792F8DFB685F136A7EBF2B2E98C43DA18A0CEAFD7519296C303861E6473 PUSH16 0x6C634300060C00330000000000000000 ","sourceMap":"6226:312:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint32,uint32)":"infinite","sub(uint32,uint32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for performing overflow-/underflow-safe addition and subtraction on uint32.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/SushiStrategyFlat.sol\":\"BoringMath32\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":256},\"remappings\":[]},\"sources\":{\"contracts/flat/SushiStrategyFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable not-rely-on-time\\r\\n\\r\\n// File contracts/interfaces/IStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IStrategy {\\r\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\r\\n    /// @param amount The amount of tokens to invest.\\r\\n    function skim(uint256 amount) external;\\r\\n\\r\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\r\\n\\r\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\r\\n    /// @dev The `actualAmount` should be very close to the amount.\\r\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\r\\n    /// @param amount The requested amount the caller wants to withdraw.\\r\\n    /// @return actualAmount The real amount that is withdrawn.\\r\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\r\\n\\r\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\r\\n// Edited by BoringCrypto\\r\\n\\r\\ncontract BoringOwnableData {\\r\\n    address public owner;\\r\\n    address public pendingOwner;\\r\\n}\\r\\n\\r\\ncontract BoringOwnable is BoringOwnableData {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice `owner` defaults to msg.sender on construction.\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\r\\n    /// Can only be invoked by the current `owner`.\\r\\n    /// @param newOwner Address of the new owner.\\r\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\r\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) public onlyOwner {\\r\\n        if (direct) {\\r\\n            // Checks\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            // Effects\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n            pendingOwner = address(0);\\r\\n        } else {\\r\\n            // Effects\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n\\r\\n        // Checks\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        // Effects\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Only allows the `owner` to execute the function.\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe math,\\r\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File contracts/strategies/SushiStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface ISushiBar is IERC20 {\\r\\n    function enter(uint256 _amount) external;\\r\\n\\r\\n    function leave(uint256 _share) external;\\r\\n}\\r\\n\\r\\ncontract SushiStrategyV1 is IStrategy, BoringOwnable {\\r\\n    using BoringMath for uint256;\\r\\n    using BoringERC20 for IERC20;\\r\\n\\r\\n    IERC20 private immutable sushi;\\r\\n    ISushiBar private immutable bar;\\r\\n\\r\\n    constructor(ISushiBar bar_, IERC20 sushi_) public {\\r\\n        bar = bar_;\\r\\n        sushi = sushi_;\\r\\n    }\\r\\n\\r\\n    // Send the assets to the Strategy and call skim to invest them\\r\\n    /// @inheritdoc IStrategy\\r\\n    function skim(uint256 amount) external override {\\r\\n        sushi.approve(address(bar), amount);\\r\\n        bar.enter(amount);\\r\\n    }\\r\\n\\r\\n    // Harvest any profits made converted to the asset and pass them to the caller\\r\\n    /// @inheritdoc IStrategy\\r\\n    function harvest(uint256 balance, address) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 keepShare = balance.mul(totalShares) / totalSushi;\\r\\n        uint256 harvestShare = share.sub(keepShare);\\r\\n        bar.leave(harvestShare);\\r\\n        amountAdded = int256(sushi.balanceOf(address(this)));\\r\\n        sushi.safeTransfer(owner, uint256(amountAdded)); // Add as profit\\r\\n    }\\r\\n\\r\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding or if the request was more than there is.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function withdraw(uint256 amount) external override onlyOwner returns (uint256 actualAmount) {\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 withdrawShare = amount.mul(totalShares) / totalSushi;\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        if (withdrawShare > share) {\\r\\n            withdrawShare = share;\\r\\n        }\\r\\n        bar.leave(withdrawShare);\\r\\n        actualAmount = sushi.balanceOf(address(this));\\r\\n        sushi.safeTransfer(owner, actualAmount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function exit(uint256 balance) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        bar.leave(share);\\r\\n        uint256 amount = sushi.balanceOf(address(this));\\r\\n        amountAdded = int256(amount - balance);\\r\\n        sushi.safeTransfer(owner, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde08dfa320b1673a0fe8574910273ad35ef10aa284095acf1e504c1b8d21c33c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A library for performing overflow-/underflow-safe addition and subtraction on uint32.","version":1}},"BoringMath64":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207ec434cbcc6c608664ecb80ee1eb3e5f12cc43af913a954a70b179816365eb2264736f6c634300060c0033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0xC434CBCC6C608664ECB80EE1EB3E5F12CC43AF913A954A70B179816365EB22 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"5811:312:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207ec434cbcc6c608664ecb80ee1eb3e5f12cc43af913a954a70b179816365eb2264736f6c634300060c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0xC434CBCC6C608664ECB80EE1EB3E5F12CC43AF913A954A70B179816365EB22 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"5811:312:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"add(uint64,uint64)":"infinite","sub(uint64,uint64)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A library for performing overflow-/underflow-safe addition and subtraction on uint64.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/SushiStrategyFlat.sol\":\"BoringMath64\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":256},\"remappings\":[]},\"sources\":{\"contracts/flat/SushiStrategyFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable not-rely-on-time\\r\\n\\r\\n// File contracts/interfaces/IStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IStrategy {\\r\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\r\\n    /// @param amount The amount of tokens to invest.\\r\\n    function skim(uint256 amount) external;\\r\\n\\r\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\r\\n\\r\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\r\\n    /// @dev The `actualAmount` should be very close to the amount.\\r\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\r\\n    /// @param amount The requested amount the caller wants to withdraw.\\r\\n    /// @return actualAmount The real amount that is withdrawn.\\r\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\r\\n\\r\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\r\\n// Edited by BoringCrypto\\r\\n\\r\\ncontract BoringOwnableData {\\r\\n    address public owner;\\r\\n    address public pendingOwner;\\r\\n}\\r\\n\\r\\ncontract BoringOwnable is BoringOwnableData {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice `owner` defaults to msg.sender on construction.\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\r\\n    /// Can only be invoked by the current `owner`.\\r\\n    /// @param newOwner Address of the new owner.\\r\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\r\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) public onlyOwner {\\r\\n        if (direct) {\\r\\n            // Checks\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            // Effects\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n            pendingOwner = address(0);\\r\\n        } else {\\r\\n            // Effects\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n\\r\\n        // Checks\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        // Effects\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Only allows the `owner` to execute the function.\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe math,\\r\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File contracts/strategies/SushiStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface ISushiBar is IERC20 {\\r\\n    function enter(uint256 _amount) external;\\r\\n\\r\\n    function leave(uint256 _share) external;\\r\\n}\\r\\n\\r\\ncontract SushiStrategyV1 is IStrategy, BoringOwnable {\\r\\n    using BoringMath for uint256;\\r\\n    using BoringERC20 for IERC20;\\r\\n\\r\\n    IERC20 private immutable sushi;\\r\\n    ISushiBar private immutable bar;\\r\\n\\r\\n    constructor(ISushiBar bar_, IERC20 sushi_) public {\\r\\n        bar = bar_;\\r\\n        sushi = sushi_;\\r\\n    }\\r\\n\\r\\n    // Send the assets to the Strategy and call skim to invest them\\r\\n    /// @inheritdoc IStrategy\\r\\n    function skim(uint256 amount) external override {\\r\\n        sushi.approve(address(bar), amount);\\r\\n        bar.enter(amount);\\r\\n    }\\r\\n\\r\\n    // Harvest any profits made converted to the asset and pass them to the caller\\r\\n    /// @inheritdoc IStrategy\\r\\n    function harvest(uint256 balance, address) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 keepShare = balance.mul(totalShares) / totalSushi;\\r\\n        uint256 harvestShare = share.sub(keepShare);\\r\\n        bar.leave(harvestShare);\\r\\n        amountAdded = int256(sushi.balanceOf(address(this)));\\r\\n        sushi.safeTransfer(owner, uint256(amountAdded)); // Add as profit\\r\\n    }\\r\\n\\r\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding or if the request was more than there is.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function withdraw(uint256 amount) external override onlyOwner returns (uint256 actualAmount) {\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 withdrawShare = amount.mul(totalShares) / totalSushi;\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        if (withdrawShare > share) {\\r\\n            withdrawShare = share;\\r\\n        }\\r\\n        bar.leave(withdrawShare);\\r\\n        actualAmount = sushi.balanceOf(address(this));\\r\\n        sushi.safeTransfer(owner, actualAmount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function exit(uint256 balance) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        bar.leave(share);\\r\\n        uint256 amount = sushi.balanceOf(address(this));\\r\\n        amountAdded = int256(amount - balance);\\r\\n        sushi.safeTransfer(owner, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde08dfa320b1673a0fe8574910273ad35ef10aa284095acf1e504c1b8d21c33c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"A library for performing overflow-/underflow-safe addition and subtraction on uint64.","version":1}},"BoringOwnable":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"claimOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"bool","name":"direct","type":"bool"},{"internalType":"bool","name":"renounce","type":"bool"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"transferOwnership(address,bool,bool)":{"params":{"direct":"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.","newOwner":"Address of the new owner.","renounce":"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."}}},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"608060405234801561001057600080fd5b50600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a361031b8061005f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063078dfbe7146100515780634e71e0c8146100895780638da5cb5b14610091578063e30c3978146100b5575b600080fd5b6100876004803603606081101561006757600080fd5b506001600160a01b038135169060208101351515906040013515156100bd565b005b610087610205565b6100996102c7565b604080516001600160a01b039092168252519081900360200190f35b6100996102d6565b6000546001600160a01b0316331461011c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b81156101e4576001600160a01b0383161515806101365750805b61017f576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b031991821617909155600180549091169055610200565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b6001546001600160a01b0316338114610265576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b6000546001600160a01b031681565b6001546001600160a01b03168156fea2646970667358221220e329c6d7c3fc9acc2b5be909d39b95f885487cc2f2314dd72505260cd861542264736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 PUSH2 0x31B DUP1 PUSH2 0x5F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x78DFBE7 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x4E71E0C8 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x91 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0xB5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x87 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x40 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0xBD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x87 PUSH2 0x205 JUMP JUMPDEST PUSH2 0x99 PUSH2 0x2C7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x99 PUSH2 0x2D6 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x11C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO ISZERO DUP1 PUSH2 0x136 JUMPI POP DUP1 JUMPDEST PUSH2 0x17F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4F776E61626C653A207A65726F2061646472657373 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH2 0x200 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ PUSH2 0x265 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C657220213D2070656E64696E67206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 0x29 0xC6 0xD7 0xC3 0xFC SWAP11 0xCC 0x2B JUMPDEST 0xE9 MULMOD 0xD3 SWAP12 SWAP6 0xF8 DUP6 0x48 PUSH29 0xC2F2314DD72505260CD861542264736F6C634300060C00330000000000 ","sourceMap":"2128:1913:0:-:0;;;2336:118;;;;;;;;;-1:-1:-1;2368:5:0;:18;;-1:-1:-1;;;;;;2368:18:0;2376:10;2368:18;;;;;2402:44;;2376:10;;2368:5;2402:44;;2368:5;;2402:44;2128:1913;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061004c5760003560e01c8063078dfbe7146100515780634e71e0c8146100895780638da5cb5b14610091578063e30c3978146100b5575b600080fd5b6100876004803603606081101561006757600080fd5b506001600160a01b038135169060208101351515906040013515156100bd565b005b610087610205565b6100996102c7565b604080516001600160a01b039092168252519081900360200190f35b6100996102d6565b6000546001600160a01b0316331461011c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b81156101e4576001600160a01b0383161515806101365750805b61017f576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b031991821617909155600180549091169055610200565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b6001546001600160a01b0316338114610265576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b6000546001600160a01b031681565b6001546001600160a01b03168156fea2646970667358221220e329c6d7c3fc9acc2b5be909d39b95f885487cc2f2314dd72505260cd861542264736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x78DFBE7 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x4E71E0C8 EQ PUSH2 0x89 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x91 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0xB5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x87 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x40 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0xBD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x87 PUSH2 0x205 JUMP JUMPDEST PUSH2 0x99 PUSH2 0x2C7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x99 PUSH2 0x2D6 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x11C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO ISZERO DUP1 PUSH2 0x136 JUMPI POP DUP1 JUMPDEST PUSH2 0x17F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4F776E61626C653A207A65726F2061646472657373 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH2 0x200 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ PUSH2 0x265 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C657220213D2070656E64696E67206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE3 0x29 0xC6 0xD7 0xC3 0xFC SWAP11 0xCC 0x2B JUMPDEST 0xE9 MULMOD 0xD3 SWAP12 SWAP6 0xF8 DUP6 0x48 PUSH29 0xC2F2314DD72505260CD861542264736F6C634300060C00330000000000 ","sourceMap":"2128:1913:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2920:506;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2920:506:0;;;;;;;;;;;;;;;;;:::i;:::-;;3508:340;;;:::i;2066:20::-;;;:::i;:::-;;;;-1:-1:-1;;;;;2066:20:0;;;;;;;;;;;;;;2093:27;;;:::i;2920:506::-;3976:5;;-1:-1:-1;;;;;3976:5:0;3962:10;:19;3954:64;;;;;-1:-1:-1;;;3954:64:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3059:6:::1;3055:364;;;-1:-1:-1::0;;;;;3113:22:0;::::1;::::0;::::1;::::0;:34:::1;;;3139:8;3113:34;3105:68;;;::::0;;-1:-1:-1;;;3105:68:0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;3105:68:0;;;;;;;;;;;;;::::1;;3240:5;::::0;;3219:37:::1;::::0;-1:-1:-1;;;;;3219:37:0;;::::1;::::0;3240:5;::::1;::::0;3219:37:::1;::::0;::::1;3271:5;:16:::0;;-1:-1:-1;;;;;3271:16:0;::::1;-1:-1:-1::0;;;;;;3271:16:0;;::::1;;::::0;;;;3302:25;;;;::::1;::::0;;3055:364:::1;;;3384:12;:23:::0;;-1:-1:-1;;;;;;3384:23:0::1;-1:-1:-1::0;;;;;3384:23:0;::::1;;::::0;;3055:364:::1;2920:506:::0;;;:::o;3508:340::-;3576:12;;-1:-1:-1;;;;;3576:12:0;3628:10;:27;;3620:72;;;;;-1:-1:-1;;;3620:72:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3751:5;;;3730:42;;-1:-1:-1;;;;;3730:42:0;;;;3751:5;;;3730:42;;;3783:5;:21;;-1:-1:-1;;;;;3783:21:0;;;-1:-1:-1;;;;;;3783:21:0;;;;;;;3815:25;;;;;;;3508:340::o;2066:20::-;;;-1:-1:-1;;;;;2066:20:0;;:::o;2093:27::-;;;-1:-1:-1;;;;;2093:27:0;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"159000","executionCost":"22570","totalCost":"181570"},"external":{"claimOwnership()":"45022","owner()":"1059","pendingOwner()":"1081","transferOwnership(address,bool,bool)":"45199"}},"methodIdentifiers":{"claimOwnership()":"4e71e0c8","owner()":"8da5cb5b","pendingOwner()":"e30c3978","transferOwnership(address,bool,bool)":"078dfbe7"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"constructor\":\"`owner` defaults to msg.sender on construction.\",\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/SushiStrategyFlat.sol\":\"BoringOwnable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":256},\"remappings\":[]},\"sources\":{\"contracts/flat/SushiStrategyFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable not-rely-on-time\\r\\n\\r\\n// File contracts/interfaces/IStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IStrategy {\\r\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\r\\n    /// @param amount The amount of tokens to invest.\\r\\n    function skim(uint256 amount) external;\\r\\n\\r\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\r\\n\\r\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\r\\n    /// @dev The `actualAmount` should be very close to the amount.\\r\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\r\\n    /// @param amount The requested amount the caller wants to withdraw.\\r\\n    /// @return actualAmount The real amount that is withdrawn.\\r\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\r\\n\\r\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\r\\n// Edited by BoringCrypto\\r\\n\\r\\ncontract BoringOwnableData {\\r\\n    address public owner;\\r\\n    address public pendingOwner;\\r\\n}\\r\\n\\r\\ncontract BoringOwnable is BoringOwnableData {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice `owner` defaults to msg.sender on construction.\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\r\\n    /// Can only be invoked by the current `owner`.\\r\\n    /// @param newOwner Address of the new owner.\\r\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\r\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) public onlyOwner {\\r\\n        if (direct) {\\r\\n            // Checks\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            // Effects\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n            pendingOwner = address(0);\\r\\n        } else {\\r\\n            // Effects\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n\\r\\n        // Checks\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        // Effects\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Only allows the `owner` to execute the function.\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe math,\\r\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File contracts/strategies/SushiStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface ISushiBar is IERC20 {\\r\\n    function enter(uint256 _amount) external;\\r\\n\\r\\n    function leave(uint256 _share) external;\\r\\n}\\r\\n\\r\\ncontract SushiStrategyV1 is IStrategy, BoringOwnable {\\r\\n    using BoringMath for uint256;\\r\\n    using BoringERC20 for IERC20;\\r\\n\\r\\n    IERC20 private immutable sushi;\\r\\n    ISushiBar private immutable bar;\\r\\n\\r\\n    constructor(ISushiBar bar_, IERC20 sushi_) public {\\r\\n        bar = bar_;\\r\\n        sushi = sushi_;\\r\\n    }\\r\\n\\r\\n    // Send the assets to the Strategy and call skim to invest them\\r\\n    /// @inheritdoc IStrategy\\r\\n    function skim(uint256 amount) external override {\\r\\n        sushi.approve(address(bar), amount);\\r\\n        bar.enter(amount);\\r\\n    }\\r\\n\\r\\n    // Harvest any profits made converted to the asset and pass them to the caller\\r\\n    /// @inheritdoc IStrategy\\r\\n    function harvest(uint256 balance, address) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 keepShare = balance.mul(totalShares) / totalSushi;\\r\\n        uint256 harvestShare = share.sub(keepShare);\\r\\n        bar.leave(harvestShare);\\r\\n        amountAdded = int256(sushi.balanceOf(address(this)));\\r\\n        sushi.safeTransfer(owner, uint256(amountAdded)); // Add as profit\\r\\n    }\\r\\n\\r\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding or if the request was more than there is.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function withdraw(uint256 amount) external override onlyOwner returns (uint256 actualAmount) {\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 withdrawShare = amount.mul(totalShares) / totalSushi;\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        if (withdrawShare > share) {\\r\\n            withdrawShare = share;\\r\\n        }\\r\\n        bar.leave(withdrawShare);\\r\\n        actualAmount = sushi.balanceOf(address(this));\\r\\n        sushi.safeTransfer(owner, actualAmount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function exit(uint256 balance) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        bar.leave(share);\\r\\n        uint256 amount = sushi.balanceOf(address(this));\\r\\n        amountAdded = int256(amount - balance);\\r\\n        sushi.safeTransfer(owner, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde08dfa320b1673a0fe8574910273ad35ef10aa284095acf1e504c1b8d21c33c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":36,"contract":"contracts/flat/SushiStrategyFlat.sol:BoringOwnable","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":38,"contract":"contracts/flat/SushiStrategyFlat.sol:BoringOwnable","label":"pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"claimOwnership()":{"notice":"Needs to be called by `pendingOwner` to claim ownership."},"constructor":"`owner` defaults to msg.sender on construction.","transferOwnership(address,bool,bool)":{"notice":"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."}},"version":1}},"BoringOwnableData":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"6080604052348015600f57600080fd5b5060b38061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638da5cb5b146037578063e30c3978146059575b600080fd5b603d605f565b604080516001600160a01b039092168252519081900360200190f35b603d606e565b6000546001600160a01b031681565b6001546001600160a01b03168156fea264697066735822122019c64650efaaaefc5b2ccf6f38befe877561236ba2b132dbdf62e8c0fb19008464736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB3 DUP1 PUSH2 0x1E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x32 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B EQ PUSH1 0x37 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH1 0x59 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3D PUSH1 0x5F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x3D PUSH1 0x6E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT 0xC6 CHAINID POP 0xEF 0xAA 0xAE 0xFC JUMPDEST 0x2C 0xCF PUSH16 0x38BEFE877561236BA2B132DBDF62E8C0 0xFB NOT STOP DUP5 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"2032:92:0:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"6080604052348015600f57600080fd5b506004361060325760003560e01c80638da5cb5b146037578063e30c3978146059575b600080fd5b603d605f565b604080516001600160a01b039092168252519081900360200190f35b603d606e565b6000546001600160a01b031681565b6001546001600160a01b03168156fea264697066735822122019c64650efaaaefc5b2ccf6f38befe877561236ba2b132dbdf62e8c0fb19008464736f6c634300060c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x32 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B EQ PUSH1 0x37 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH1 0x59 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3D PUSH1 0x5F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x3D PUSH1 0x6E JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT 0xC6 CHAINID POP 0xEF 0xAA 0xAE 0xFC JUMPDEST 0x2C 0xCF PUSH16 0x38BEFE877561236BA2B132DBDF62E8C0 0xFB NOT STOP DUP5 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"2032:92:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2066:20;;;:::i;:::-;;;;-1:-1:-1;;;;;2066:20:0;;;;;;;;;;;;;;2093:27;;;:::i;2066:20::-;;;-1:-1:-1;;;;;2066:20:0;;:::o;2093:27::-;;;-1:-1:-1;;;;;2093:27:0;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"35800","executionCost":"87","totalCost":"35887"},"external":{"owner()":"1015","pendingOwner()":"1037"}},"methodIdentifiers":{"owner()":"8da5cb5b","pendingOwner()":"e30c3978"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/SushiStrategyFlat.sol\":\"BoringOwnableData\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":256},\"remappings\":[]},\"sources\":{\"contracts/flat/SushiStrategyFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable not-rely-on-time\\r\\n\\r\\n// File contracts/interfaces/IStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IStrategy {\\r\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\r\\n    /// @param amount The amount of tokens to invest.\\r\\n    function skim(uint256 amount) external;\\r\\n\\r\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\r\\n\\r\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\r\\n    /// @dev The `actualAmount` should be very close to the amount.\\r\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\r\\n    /// @param amount The requested amount the caller wants to withdraw.\\r\\n    /// @return actualAmount The real amount that is withdrawn.\\r\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\r\\n\\r\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\r\\n// Edited by BoringCrypto\\r\\n\\r\\ncontract BoringOwnableData {\\r\\n    address public owner;\\r\\n    address public pendingOwner;\\r\\n}\\r\\n\\r\\ncontract BoringOwnable is BoringOwnableData {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice `owner` defaults to msg.sender on construction.\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\r\\n    /// Can only be invoked by the current `owner`.\\r\\n    /// @param newOwner Address of the new owner.\\r\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\r\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) public onlyOwner {\\r\\n        if (direct) {\\r\\n            // Checks\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            // Effects\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n            pendingOwner = address(0);\\r\\n        } else {\\r\\n            // Effects\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n\\r\\n        // Checks\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        // Effects\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Only allows the `owner` to execute the function.\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe math,\\r\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File contracts/strategies/SushiStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface ISushiBar is IERC20 {\\r\\n    function enter(uint256 _amount) external;\\r\\n\\r\\n    function leave(uint256 _share) external;\\r\\n}\\r\\n\\r\\ncontract SushiStrategyV1 is IStrategy, BoringOwnable {\\r\\n    using BoringMath for uint256;\\r\\n    using BoringERC20 for IERC20;\\r\\n\\r\\n    IERC20 private immutable sushi;\\r\\n    ISushiBar private immutable bar;\\r\\n\\r\\n    constructor(ISushiBar bar_, IERC20 sushi_) public {\\r\\n        bar = bar_;\\r\\n        sushi = sushi_;\\r\\n    }\\r\\n\\r\\n    // Send the assets to the Strategy and call skim to invest them\\r\\n    /// @inheritdoc IStrategy\\r\\n    function skim(uint256 amount) external override {\\r\\n        sushi.approve(address(bar), amount);\\r\\n        bar.enter(amount);\\r\\n    }\\r\\n\\r\\n    // Harvest any profits made converted to the asset and pass them to the caller\\r\\n    /// @inheritdoc IStrategy\\r\\n    function harvest(uint256 balance, address) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 keepShare = balance.mul(totalShares) / totalSushi;\\r\\n        uint256 harvestShare = share.sub(keepShare);\\r\\n        bar.leave(harvestShare);\\r\\n        amountAdded = int256(sushi.balanceOf(address(this)));\\r\\n        sushi.safeTransfer(owner, uint256(amountAdded)); // Add as profit\\r\\n    }\\r\\n\\r\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding or if the request was more than there is.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function withdraw(uint256 amount) external override onlyOwner returns (uint256 actualAmount) {\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 withdrawShare = amount.mul(totalShares) / totalSushi;\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        if (withdrawShare > share) {\\r\\n            withdrawShare = share;\\r\\n        }\\r\\n        bar.leave(withdrawShare);\\r\\n        actualAmount = sushi.balanceOf(address(this));\\r\\n        sushi.safeTransfer(owner, actualAmount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function exit(uint256 balance) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        bar.leave(share);\\r\\n        uint256 amount = sushi.balanceOf(address(this));\\r\\n        amountAdded = int256(amount - balance);\\r\\n        sushi.safeTransfer(owner, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde08dfa320b1673a0fe8574910273ad35ef10aa284095acf1e504c1b8d21c33c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":36,"contract":"contracts/flat/SushiStrategyFlat.sol:BoringOwnableData","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":38,"contract":"contracts/flat/SushiStrategyFlat.sol:BoringOwnableData","label":"pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","totalSupply()":"18160ddd"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"EIP 2612\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/SushiStrategyFlat.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":256},\"remappings\":[]},\"sources\":{\"contracts/flat/SushiStrategyFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable not-rely-on-time\\r\\n\\r\\n// File contracts/interfaces/IStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IStrategy {\\r\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\r\\n    /// @param amount The amount of tokens to invest.\\r\\n    function skim(uint256 amount) external;\\r\\n\\r\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\r\\n\\r\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\r\\n    /// @dev The `actualAmount` should be very close to the amount.\\r\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\r\\n    /// @param amount The requested amount the caller wants to withdraw.\\r\\n    /// @return actualAmount The real amount that is withdrawn.\\r\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\r\\n\\r\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\r\\n// Edited by BoringCrypto\\r\\n\\r\\ncontract BoringOwnableData {\\r\\n    address public owner;\\r\\n    address public pendingOwner;\\r\\n}\\r\\n\\r\\ncontract BoringOwnable is BoringOwnableData {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice `owner` defaults to msg.sender on construction.\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\r\\n    /// Can only be invoked by the current `owner`.\\r\\n    /// @param newOwner Address of the new owner.\\r\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\r\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) public onlyOwner {\\r\\n        if (direct) {\\r\\n            // Checks\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            // Effects\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n            pendingOwner = address(0);\\r\\n        } else {\\r\\n            // Effects\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n\\r\\n        // Checks\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        // Effects\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Only allows the `owner` to execute the function.\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe math,\\r\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File contracts/strategies/SushiStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface ISushiBar is IERC20 {\\r\\n    function enter(uint256 _amount) external;\\r\\n\\r\\n    function leave(uint256 _share) external;\\r\\n}\\r\\n\\r\\ncontract SushiStrategyV1 is IStrategy, BoringOwnable {\\r\\n    using BoringMath for uint256;\\r\\n    using BoringERC20 for IERC20;\\r\\n\\r\\n    IERC20 private immutable sushi;\\r\\n    ISushiBar private immutable bar;\\r\\n\\r\\n    constructor(ISushiBar bar_, IERC20 sushi_) public {\\r\\n        bar = bar_;\\r\\n        sushi = sushi_;\\r\\n    }\\r\\n\\r\\n    // Send the assets to the Strategy and call skim to invest them\\r\\n    /// @inheritdoc IStrategy\\r\\n    function skim(uint256 amount) external override {\\r\\n        sushi.approve(address(bar), amount);\\r\\n        bar.enter(amount);\\r\\n    }\\r\\n\\r\\n    // Harvest any profits made converted to the asset and pass them to the caller\\r\\n    /// @inheritdoc IStrategy\\r\\n    function harvest(uint256 balance, address) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 keepShare = balance.mul(totalShares) / totalSushi;\\r\\n        uint256 harvestShare = share.sub(keepShare);\\r\\n        bar.leave(harvestShare);\\r\\n        amountAdded = int256(sushi.balanceOf(address(this)));\\r\\n        sushi.safeTransfer(owner, uint256(amountAdded)); // Add as profit\\r\\n    }\\r\\n\\r\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding or if the request was more than there is.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function withdraw(uint256 amount) external override onlyOwner returns (uint256 actualAmount) {\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 withdrawShare = amount.mul(totalShares) / totalSushi;\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        if (withdrawShare > share) {\\r\\n            withdrawShare = share;\\r\\n        }\\r\\n        bar.leave(withdrawShare);\\r\\n        actualAmount = sushi.balanceOf(address(this));\\r\\n        sushi.safeTransfer(owner, actualAmount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function exit(uint256 balance) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        bar.leave(share);\\r\\n        uint256 amount = sushi.balanceOf(address(this));\\r\\n        amountAdded = int256(amount - balance);\\r\\n        sushi.safeTransfer(owner, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde08dfa320b1673a0fe8574910273ad35ef10aa284095acf1e504c1b8d21c33c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"EIP 2612"}},"version":1}},"IStrategy":{"abi":[{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"exit","outputs":[{"internalType":"int256","name":"amountAdded","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"address","name":"sender","type":"address"}],"name":"harvest","outputs":[{"internalType":"int256","name":"amountAdded","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"skim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"actualAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"exit(uint256)":{"params":{"balance":"The amount of tokens the caller thinks it has invested."},"returns":{"amountAdded":"The delta (+profit or -loss) that occured in contrast to `balance`."}},"harvest(uint256,address)":{"params":{"balance":"The amount of tokens the caller thinks it has invested.","sender":"The address of the initiator of this transaction. Can be used for reimbursements, etc."},"returns":{"amountAdded":"The delta (+profit or -loss) that occured in contrast to `balance`."}},"skim(uint256)":{"params":{"amount":"The amount of tokens to invest."}},"withdraw(uint256)":{"details":"The `actualAmount` should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.","params":{"amount":"The requested amount the caller wants to withdraw."},"returns":{"actualAmount":"The real amount that is withdrawn."}}},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"exit(uint256)":"7f8661a1","harvest(uint256,address)":"18fccc76","skim(uint256)":"6939aaf5","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amountAdded\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amountAdded\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exit(uint256)\":{\"params\":{\"balance\":\"The amount of tokens the caller thinks it has invested.\"},\"returns\":{\"amountAdded\":\"The delta (+profit or -loss) that occured in contrast to `balance`.\"}},\"harvest(uint256,address)\":{\"params\":{\"balance\":\"The amount of tokens the caller thinks it has invested.\",\"sender\":\"The address of the initiator of this transaction. Can be used for reimbursements, etc.\"},\"returns\":{\"amountAdded\":\"The delta (+profit or -loss) that occured in contrast to `balance`.\"}},\"skim(uint256)\":{\"params\":{\"amount\":\"The amount of tokens to invest.\"}},\"withdraw(uint256)\":{\"details\":\"The `actualAmount` should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.\",\"params\":{\"amount\":\"The requested amount the caller wants to withdraw.\"},\"returns\":{\"actualAmount\":\"The real amount that is withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exit(uint256)\":{\"notice\":\"Withdraw all assets in the safest way possible. This shouldn't fail.\"},\"harvest(uint256,address)\":{\"notice\":\"Harvest any profits made converted to the asset and pass them to the caller.\"},\"skim(uint256)\":{\"notice\":\"Send the assets to the Strategy and call skim to invest them.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw assets. The returned amount can differ from the requested amount due to rounding.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/SushiStrategyFlat.sol\":\"IStrategy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":256},\"remappings\":[]},\"sources\":{\"contracts/flat/SushiStrategyFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable not-rely-on-time\\r\\n\\r\\n// File contracts/interfaces/IStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IStrategy {\\r\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\r\\n    /// @param amount The amount of tokens to invest.\\r\\n    function skim(uint256 amount) external;\\r\\n\\r\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\r\\n\\r\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\r\\n    /// @dev The `actualAmount` should be very close to the amount.\\r\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\r\\n    /// @param amount The requested amount the caller wants to withdraw.\\r\\n    /// @return actualAmount The real amount that is withdrawn.\\r\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\r\\n\\r\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\r\\n// Edited by BoringCrypto\\r\\n\\r\\ncontract BoringOwnableData {\\r\\n    address public owner;\\r\\n    address public pendingOwner;\\r\\n}\\r\\n\\r\\ncontract BoringOwnable is BoringOwnableData {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice `owner` defaults to msg.sender on construction.\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\r\\n    /// Can only be invoked by the current `owner`.\\r\\n    /// @param newOwner Address of the new owner.\\r\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\r\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) public onlyOwner {\\r\\n        if (direct) {\\r\\n            // Checks\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            // Effects\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n            pendingOwner = address(0);\\r\\n        } else {\\r\\n            // Effects\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n\\r\\n        // Checks\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        // Effects\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Only allows the `owner` to execute the function.\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe math,\\r\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File contracts/strategies/SushiStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface ISushiBar is IERC20 {\\r\\n    function enter(uint256 _amount) external;\\r\\n\\r\\n    function leave(uint256 _share) external;\\r\\n}\\r\\n\\r\\ncontract SushiStrategyV1 is IStrategy, BoringOwnable {\\r\\n    using BoringMath for uint256;\\r\\n    using BoringERC20 for IERC20;\\r\\n\\r\\n    IERC20 private immutable sushi;\\r\\n    ISushiBar private immutable bar;\\r\\n\\r\\n    constructor(ISushiBar bar_, IERC20 sushi_) public {\\r\\n        bar = bar_;\\r\\n        sushi = sushi_;\\r\\n    }\\r\\n\\r\\n    // Send the assets to the Strategy and call skim to invest them\\r\\n    /// @inheritdoc IStrategy\\r\\n    function skim(uint256 amount) external override {\\r\\n        sushi.approve(address(bar), amount);\\r\\n        bar.enter(amount);\\r\\n    }\\r\\n\\r\\n    // Harvest any profits made converted to the asset and pass them to the caller\\r\\n    /// @inheritdoc IStrategy\\r\\n    function harvest(uint256 balance, address) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 keepShare = balance.mul(totalShares) / totalSushi;\\r\\n        uint256 harvestShare = share.sub(keepShare);\\r\\n        bar.leave(harvestShare);\\r\\n        amountAdded = int256(sushi.balanceOf(address(this)));\\r\\n        sushi.safeTransfer(owner, uint256(amountAdded)); // Add as profit\\r\\n    }\\r\\n\\r\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding or if the request was more than there is.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function withdraw(uint256 amount) external override onlyOwner returns (uint256 actualAmount) {\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 withdrawShare = amount.mul(totalShares) / totalSushi;\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        if (withdrawShare > share) {\\r\\n            withdrawShare = share;\\r\\n        }\\r\\n        bar.leave(withdrawShare);\\r\\n        actualAmount = sushi.balanceOf(address(this));\\r\\n        sushi.safeTransfer(owner, actualAmount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function exit(uint256 balance) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        bar.leave(share);\\r\\n        uint256 amount = sushi.balanceOf(address(this));\\r\\n        amountAdded = int256(amount - balance);\\r\\n        sushi.safeTransfer(owner, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde08dfa320b1673a0fe8574910273ad35ef10aa284095acf1e504c1b8d21c33c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"exit(uint256)":{"notice":"Withdraw all assets in the safest way possible. This shouldn't fail."},"harvest(uint256,address)":{"notice":"Harvest any profits made converted to the asset and pass them to the caller."},"skim(uint256)":{"notice":"Send the assets to the Strategy and call skim to invest them."},"withdraw(uint256)":{"notice":"Withdraw assets. The returned amount can differ from the requested amount due to rounding."}},"version":1}},"ISushiBar":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"enter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_share","type":"uint256"}],"name":"leave","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","enter(uint256)":"a59f3e0c","leave(uint256)":"67dfd4c9","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","totalSupply()":"18160ddd"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"leave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"EIP 2612\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/SushiStrategyFlat.sol\":\"ISushiBar\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":256},\"remappings\":[]},\"sources\":{\"contracts/flat/SushiStrategyFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable not-rely-on-time\\r\\n\\r\\n// File contracts/interfaces/IStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IStrategy {\\r\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\r\\n    /// @param amount The amount of tokens to invest.\\r\\n    function skim(uint256 amount) external;\\r\\n\\r\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\r\\n\\r\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\r\\n    /// @dev The `actualAmount` should be very close to the amount.\\r\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\r\\n    /// @param amount The requested amount the caller wants to withdraw.\\r\\n    /// @return actualAmount The real amount that is withdrawn.\\r\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\r\\n\\r\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\r\\n// Edited by BoringCrypto\\r\\n\\r\\ncontract BoringOwnableData {\\r\\n    address public owner;\\r\\n    address public pendingOwner;\\r\\n}\\r\\n\\r\\ncontract BoringOwnable is BoringOwnableData {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice `owner` defaults to msg.sender on construction.\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\r\\n    /// Can only be invoked by the current `owner`.\\r\\n    /// @param newOwner Address of the new owner.\\r\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\r\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) public onlyOwner {\\r\\n        if (direct) {\\r\\n            // Checks\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            // Effects\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n            pendingOwner = address(0);\\r\\n        } else {\\r\\n            // Effects\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n\\r\\n        // Checks\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        // Effects\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Only allows the `owner` to execute the function.\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe math,\\r\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File contracts/strategies/SushiStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface ISushiBar is IERC20 {\\r\\n    function enter(uint256 _amount) external;\\r\\n\\r\\n    function leave(uint256 _share) external;\\r\\n}\\r\\n\\r\\ncontract SushiStrategyV1 is IStrategy, BoringOwnable {\\r\\n    using BoringMath for uint256;\\r\\n    using BoringERC20 for IERC20;\\r\\n\\r\\n    IERC20 private immutable sushi;\\r\\n    ISushiBar private immutable bar;\\r\\n\\r\\n    constructor(ISushiBar bar_, IERC20 sushi_) public {\\r\\n        bar = bar_;\\r\\n        sushi = sushi_;\\r\\n    }\\r\\n\\r\\n    // Send the assets to the Strategy and call skim to invest them\\r\\n    /// @inheritdoc IStrategy\\r\\n    function skim(uint256 amount) external override {\\r\\n        sushi.approve(address(bar), amount);\\r\\n        bar.enter(amount);\\r\\n    }\\r\\n\\r\\n    // Harvest any profits made converted to the asset and pass them to the caller\\r\\n    /// @inheritdoc IStrategy\\r\\n    function harvest(uint256 balance, address) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 keepShare = balance.mul(totalShares) / totalSushi;\\r\\n        uint256 harvestShare = share.sub(keepShare);\\r\\n        bar.leave(harvestShare);\\r\\n        amountAdded = int256(sushi.balanceOf(address(this)));\\r\\n        sushi.safeTransfer(owner, uint256(amountAdded)); // Add as profit\\r\\n    }\\r\\n\\r\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding or if the request was more than there is.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function withdraw(uint256 amount) external override onlyOwner returns (uint256 actualAmount) {\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 withdrawShare = amount.mul(totalShares) / totalSushi;\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        if (withdrawShare > share) {\\r\\n            withdrawShare = share;\\r\\n        }\\r\\n        bar.leave(withdrawShare);\\r\\n        actualAmount = sushi.balanceOf(address(this));\\r\\n        sushi.safeTransfer(owner, actualAmount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function exit(uint256 balance) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        bar.leave(share);\\r\\n        uint256 amount = sushi.balanceOf(address(this));\\r\\n        amountAdded = int256(amount - balance);\\r\\n        sushi.safeTransfer(owner, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde08dfa320b1673a0fe8574910273ad35ef10aa284095acf1e504c1b8d21c33c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"notice":"EIP 2612"}},"version":1}},"SushiStrategyV1":{"abi":[{"inputs":[{"internalType":"contract ISushiBar","name":"bar_","type":"address"},{"internalType":"contract IERC20","name":"sushi_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"claimOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"name":"exit","outputs":[{"internalType":"int256","name":"amountAdded","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"harvest","outputs":[{"internalType":"int256","name":"amountAdded","type":"int256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"skim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"bool","name":"direct","type":"bool"},{"internalType":"bool","name":"renounce","type":"bool"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"actualAmount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"exit(uint256)":{"params":{"balance":"The amount of tokens the caller thinks it has invested."},"returns":{"amountAdded":"The delta (+profit or -loss) that occured in contrast to `balance`."}},"harvest(uint256,address)":{"params":{"balance":"The amount of tokens the caller thinks it has invested.","sender":"The address of the initiator of this transaction. Can be used for reimbursements, etc."},"returns":{"amountAdded":"The delta (+profit or -loss) that occured in contrast to `balance`."}},"skim(uint256)":{"params":{"amount":"The amount of tokens to invest."}},"transferOwnership(address,bool,bool)":{"params":{"direct":"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.","newOwner":"Address of the new owner.","renounce":"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."}},"withdraw(uint256)":{"details":"The `actualAmount` should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.","params":{"amount":"The requested amount the caller wants to withdraw."},"returns":{"actualAmount":"The real amount that is withdrawn."}}},"version":1},"evm":{"bytecode":{"linkReferences":{},"object":"","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x125B CODESIZE SUB DUP1 PUSH2 0x125B DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0xA0 MSTORE SWAP2 SHL AND PUSH1 0x80 MSTORE PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0x113F PUSH2 0x11C PUSH1 0x0 CODECOPY DUP1 PUSH2 0x33A MSTORE DUP1 PUSH2 0x3F1 MSTORE DUP1 PUSH2 0x47B MSTORE DUP1 PUSH2 0x549 MSTORE DUP1 PUSH2 0x703 MSTORE DUP1 PUSH2 0x79E MSTORE DUP1 PUSH2 0x860 MSTORE DUP1 PUSH2 0x907 MSTORE DUP1 PUSH2 0xB4E MSTORE DUP1 PUSH2 0xC01 MSTORE DUP1 PUSH2 0xCC7 MSTORE DUP1 PUSH2 0xD82 MSTORE POP DUP1 PUSH2 0x4AB MSTORE DUP1 PUSH2 0x5E3 MSTORE DUP1 PUSH2 0x66B MSTORE DUP1 PUSH2 0x7CE MSTORE DUP1 PUSH2 0x9A1 MSTORE DUP1 PUSH2 0xA29 MSTORE DUP1 PUSH2 0xB1F MSTORE DUP1 PUSH2 0xDE6 MSTORE DUP1 PUSH2 0xE96 MSTORE POP PUSH2 0x113F PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6939AAF5 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x6939AAF5 EQ PUSH2 0x128 JUMPI DUP1 PUSH4 0x7F8661A1 EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x186 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x78DFBE7 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x18FCCC76 EQ PUSH2 0xC5 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x4E71E0C8 EQ PUSH2 0x120 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x40 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x18E JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2D6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x69F JUMP JUMPDEST PUSH2 0xC3 PUSH2 0xA5B JUMP JUMPDEST PUSH2 0xC3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xB1D JUMP JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xC63 JUMP JUMPDEST PUSH2 0x16A PUSH2 0xEC6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x16A PUSH2 0xED5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1ED JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x2B5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO ISZERO DUP1 PUSH2 0x207 JUMPI POP DUP1 JUMPDEST PUSH2 0x250 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4F776E61626C653A207A65726F2061646472657373 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH2 0x2D1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x336 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x44B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 PUSH32 0x0 SWAP1 SWAP3 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x508 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x51E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH2 0x52F DUP9 DUP6 PUSH2 0xEE4 JUMP JUMPDEST DUP2 PUSH2 0x536 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH2 0x545 DUP6 DUP4 PUSH2 0xF56 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x67DFD4C9 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP4 POP PUSH4 0x70A08231 SWAP3 POP PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 SLOAD SWAP1 SWAP7 POP PUSH2 0x694 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 AND DUP9 PUSH2 0xFA6 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6FF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x75A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 PUSH32 0x0 SWAP1 SWAP3 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x817 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x82B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x841 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH2 0x852 DUP7 DUP6 PUSH2 0xEE4 JUMP JUMPDEST DUP2 PUSH2 0x859 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x905 JUMPI DUP1 SWAP2 POP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x67DFD4C9 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x96B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x97F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP4 POP PUSH4 0x70A08231 SWAP3 POP PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 SLOAD SWAP1 SWAP6 POP PUSH2 0xA52 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 AND DUP8 PUSH2 0xFA6 JUMP JUMPDEST POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ PUSH2 0xABB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C657220213D2070656E64696E67206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x95EA7B3 PUSH32 0x0 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBC8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x2967CF83 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xA59F3E0C SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC5C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCC3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD46 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x67DFD4C9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x67DFD4C9 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDDE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 SLOAD DUP6 DUP3 SUB SWAP5 POP SWAP1 SWAP2 POP PUSH2 0xEBF SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 AND DUP4 PUSH2 0xFA6 JUMP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0xEFF JUMPI POP POP DUP1 DUP3 MUL DUP3 DUP3 DUP3 DUP2 PUSH2 0xEFC JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0xF50 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A204D756C204F766572666C6F770000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 GT ISZERO PUSH2 0xF50 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x426F72696E674D6174683A20556E646572666C6F77 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR DUP2 MSTORE SWAP3 MLOAD DUP3 MLOAD PUSH1 0x0 SWAP5 PUSH1 0x60 SWAP5 SWAP4 DUP10 AND SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1023 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1004 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1085 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x108A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x10B8 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x10B8 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x10B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST PUSH2 0xC5C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E73666572206661696C656400000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xDF GASPRICE 0x2C EXTCODESIZE 0xBD CHAINID MSTORE KECCAK256 0xD8 0xC4 0xD 0x4C 0xB9 PC 0xAD SDIV 0xAA 0x48 0xED 0xEC 0xCA CODESIZE PUSH7 0x7F7BAD344DEF1A 0xA7 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"11396:2433:0:-:0;;;11605:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11605:104:0;;;;;;;2368:5;:18;;-1:-1:-1;;;;;;2368:18:0;2376:10;2368:18;;;;;11605:104;2402:44;2376:10;;2368:5;2402:44;;2368:5;;2402:44;-1:-1:-1;;;;;;11666:10:0;;;;;;;;11687:14;;;;;11396:2433;;;;;;;;;;;;;;;;"},"deployedBytecode":{"immutableReferences":{"844":[{"length":32,"start":1195},{"length":32,"start":1507},{"length":32,"start":1643},{"length":32,"start":1998},{"length":32,"start":2465},{"length":32,"start":2601},{"length":32,"start":2847},{"length":32,"start":3558},{"length":32,"start":3734}],"846":[{"length":32,"start":826},{"length":32,"start":1009},{"length":32,"start":1147},{"length":32,"start":1353},{"length":32,"start":1795},{"length":32,"start":1950},{"length":32,"start":2144},{"length":32,"start":2311},{"length":32,"start":2894},{"length":32,"start":3073},{"length":32,"start":3271},{"length":32,"start":3458}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6939AAF5 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x6939AAF5 EQ PUSH2 0x128 JUMPI DUP1 PUSH4 0x7F8661A1 EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x186 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x78DFBE7 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x18FCCC76 EQ PUSH2 0xC5 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x4E71E0C8 EQ PUSH2 0x120 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x40 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x18E JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2D6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x69F JUMP JUMPDEST PUSH2 0xC3 PUSH2 0xA5B JUMP JUMPDEST PUSH2 0xC3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xB1D JUMP JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x15B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xC63 JUMP JUMPDEST PUSH2 0x16A PUSH2 0xEC6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x16A PUSH2 0xED5 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1ED JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x2B5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO ISZERO DUP1 PUSH2 0x207 JUMPI POP DUP1 JUMPDEST PUSH2 0x250 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4F776E61626C653A207A65726F2061646472657373 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH2 0x2D1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND OR SWAP1 SSTORE JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x336 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x18160DDD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x18160DDD SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x44B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 PUSH32 0x0 SWAP1 SWAP3 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x508 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x51E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH2 0x52F DUP9 DUP6 PUSH2 0xEE4 JUMP JUMPDEST DUP2 PUSH2 0x536 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH2 0x545 DUP6 DUP4 PUSH2 0xF56 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x67DFD4C9 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP4 POP PUSH4 0x70A08231 SWAP3 POP PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x655 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 SLOAD SWAP1 SWAP7 POP PUSH2 0x694 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 AND DUP9 PUSH2 0xFA6 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6FF JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x75A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 MLOAD SWAP3 SWAP4 POP PUSH1 0x0 SWAP3 PUSH32 0x0 SWAP1 SWAP3 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x817 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x82B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x841 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH2 0x852 DUP7 DUP6 PUSH2 0xEE4 JUMP JUMPDEST DUP2 PUSH2 0x859 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x905 JUMPI DUP1 SWAP2 POP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x67DFD4C9 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x96B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x97F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP4 POP PUSH4 0x70A08231 SWAP3 POP PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 SLOAD SWAP1 SWAP6 POP PUSH2 0xA52 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 AND DUP8 PUSH2 0xFA6 JUMP JUMPDEST POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ PUSH2 0xABB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C657220213D2070656E64696E67206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x95EA7B3 PUSH32 0x0 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBC8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH4 0x2967CF83 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0xA59F3E0C SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC5C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCC3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD46 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x67DFD4C9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 MLOAD SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND SWAP2 PUSH4 0x67DFD4C9 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x0 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xDDE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xE7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x0 SLOAD DUP6 DUP3 SUB SWAP5 POP SWAP1 SWAP2 POP PUSH2 0xEBF SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 AND DUP4 PUSH2 0xFA6 JUMP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0xEFF JUMPI POP POP DUP1 DUP3 MUL DUP3 DUP3 DUP3 DUP2 PUSH2 0xEFC JUMPI INVALID JUMPDEST DIV EQ JUMPDEST PUSH2 0xF50 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E674D6174683A204D756C204F766572666C6F770000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 SUB DUP3 DUP2 GT ISZERO PUSH2 0xF50 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x426F72696E674D6174683A20556E646572666C6F77 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR DUP2 MSTORE SWAP3 MLOAD DUP3 MLOAD PUSH1 0x0 SWAP5 PUSH1 0x60 SWAP5 SWAP4 DUP10 AND SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1023 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1004 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1085 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x108A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x10B8 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x10B8 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x10B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST PUSH2 0xC5C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426F72696E6745524332303A205472616E73666572206661696C656400000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xDF GASPRICE 0x2C EXTCODESIZE 0xBD CHAINID MSTORE KECCAK256 0xD8 0xC4 0xD 0x4C 0xB9 PC 0xAD SDIV 0xAA 0x48 0xED 0xEC 0xCA CODESIZE PUSH7 0x7F7BAD344DEF1A 0xA7 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ","sourceMap":"11396:2433:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2920:506;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2920:506:0;;;;;;;;;;;;;;;;;:::i;:::-;;12070:568;;;;;;;;;;;;;;;;-1:-1:-1;12070:568:0;;;;;;-1:-1:-1;;;;;12070:568:0;;:::i;:::-;;;;;;;;;;;;;;;;12817:564;;;;;;;;;;;;;;;;-1:-1:-1;12817:564:0;;:::i;3508:340::-;;;:::i;11817:130::-;;;;;;;;;;;;;;;;-1:-1:-1;11817:130:0;;:::i;13497:329::-;;;;;;;;;;;;;;;;-1:-1:-1;13497:329:0;;:::i;2066:20::-;;;:::i;:::-;;;;-1:-1:-1;;;;;2066:20:0;;;;;;;;;;;;;;2093:27;;;:::i;2920:506::-;3976:5;;-1:-1:-1;;;;;3976:5:0;3962:10;:19;3954:64;;;;;-1:-1:-1;;;3954:64:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3059:6:::1;3055:364;;;-1:-1:-1::0;;;;;3113:22:0;::::1;::::0;::::1;::::0;:34:::1;;;3139:8;3113:34;3105:68;;;::::0;;-1:-1:-1;;;3105:68:0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;3105:68:0;;;;;;;;;;;;;::::1;;3240:5;::::0;;3219:37:::1;::::0;-1:-1:-1;;;;;3219:37:0;;::::1;::::0;3240:5;::::1;::::0;3219:37:::1;::::0;::::1;3271:5;:16:::0;;-1:-1:-1;;;;;3271:16:0;::::1;-1:-1:-1::0;;;;;;3271:16:0;;::::1;;::::0;;;;3302:25;;;;::::1;::::0;;3055:364:::1;;;3384:12;:23:::0;;-1:-1:-1;;;;;;3384:23:0::1;-1:-1:-1::0;;;;;3384:23:0;::::1;;::::0;;3055:364:::1;2920:506:::0;;;:::o;12070:568::-;12150:18;3976:5;;-1:-1:-1;;;;;3976:5:0;3962:10;:19;3954:64;;;;;-1:-1:-1;;;3954:64:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12181:13:::1;12197:3;-1:-1:-1::0;;;;;12197:13:0::1;;12219:4;12197:28;;;;;;;;;;;;;-1:-1:-1::0;;;;;12197:28:0::1;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;12197:28:0;12258:17:::1;::::0;;-1:-1:-1;;;12258:17:0;;;;12197:28;;-1:-1:-1;12236:19:0::1;::::0;-1:-1:-1;;;;;12258:3:0::1;:15;::::0;::::1;::::0;:17:::1;::::0;;::::1;::::0;12197:28:::1;::::0;12258:17;;;;;;;:15;:17;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;12258:17:0;12307:29:::1;::::0;;-1:-1:-1;;;12307:29:0;;-1:-1:-1;;;;;12331:3:0::1;12307:29:::0;::::1;;::::0;::::1;::::0;;;12258:17;;-1:-1:-1;;;12307:5:0::1;:15:::0;;::::1;::::0;::::1;::::0;:29;;;;;12258:17:::1;::::0;12307:29;;;;;;;;:15;:29;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;12307:29:0;;-1:-1:-1;12347:17:0::1;12307:29:::0;12367:24:::1;:7:::0;12379:11;12367::::1;:24::i;:::-;:37;;;;;;::::0;-1:-1:-1;12415:20:0::1;12438;:5:::0;12367:37;12438:9:::1;:20::i;:::-;12415:43;;12469:3;-1:-1:-1::0;;;;;12469:9:0::1;;12479:12;12469:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;12524:30:0::1;::::0;;-1:-1:-1;;;12524:30:0;;12548:4:::1;12524:30;::::0;::::1;::::0;;;-1:-1:-1;;;;;12524:5:0::1;:15;::::0;-1:-1:-1;12524:15:0::1;::::0;-1:-1:-1;12524:30:0;;;;;::::1;::::0;;;;;;;;:15;:30;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;12524:30:0;12585:5:::1;::::0;12524:30;;-1:-1:-1;12566:47:0::1;::::0;-1:-1:-1;;;;;12566:5:0::1;:18:::0;::::1;::::0;12585:5:::1;12524:30:::0;12566:18:::1;:47::i;:::-;4029:1;;;;;12070:568:::0;;;;:::o;12817:564::-;12888:20;3976:5;;-1:-1:-1;;;;;3976:5:0;3962:10;:19;3954:64;;;;;-1:-1:-1;;;3954:64:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12921:19:::1;12943:3;-1:-1:-1::0;;;;;12943:15:0::1;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;12943:17:0;12992:29:::1;::::0;;-1:-1:-1;;;12992:29:0;;-1:-1:-1;;;;;13016:3:0::1;12992:29:::0;::::1;;::::0;::::1;::::0;;;12943:17;;-1:-1:-1;;;12992:5:0::1;:15:::0;;::::1;::::0;::::1;::::0;:29;;;;;12943:17:::1;::::0;12992:29;;;;;;;;:15;:29;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;12992:29:0;;-1:-1:-1;13032:21:0::1;12992:29:::0;13056:23:::1;:6:::0;13067:11;13056:10:::1;:23::i;:::-;:36;;;;;;13032:60;;13103:13;13119:3;-1:-1:-1::0;;;;;13119:13:0::1;;13141:4;13119:28;;;;;;;;;;;;;-1:-1:-1::0;;;;;13119:28:0::1;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;13119:28:0;;-1:-1:-1;13162:21:0;;::::1;13158:75;;;13216:5;13200:21;;13158:75;13243:3;-1:-1:-1::0;;;;;13243:9:0::1;;13253:13;13243:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;13293:30:0::1;::::0;;-1:-1:-1;;;13293:30:0;;13317:4:::1;13293:30;::::0;::::1;::::0;;;-1:-1:-1;;;;;13293:5:0::1;:15;::::0;-1:-1:-1;13293:15:0::1;::::0;-1:-1:-1;13293:30:0;;;;;::::1;::::0;;;;;;;;:15;:30;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;13293:30:0;13353:5:::1;::::0;13293:30;;-1:-1:-1;13334:39:0::1;::::0;-1:-1:-1;;;;;13334:5:0::1;:18:::0;::::1;::::0;13353:5:::1;13293:30:::0;13334:18:::1;:39::i;:::-;4029:1;;;;12817:564:::0;;;:::o;3508:340::-;3576:12;;-1:-1:-1;;;;;3576:12:0;3628:10;:27;;3620:72;;;;;-1:-1:-1;;;3620:72:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3751:5;;;3730:42;;-1:-1:-1;;;;;3730:42:0;;;;3751:5;;;3730:42;;;3783:5;:21;;-1:-1:-1;;;;;3783:21:0;;;-1:-1:-1;;;;;;3783:21:0;;;;;;;3815:25;;;;;;;3508:340::o;11817:130::-;11876:5;-1:-1:-1;;;;;11876:13:0;;11898:3;11904:6;11876:35;;;;;;;;;;;;;-1:-1:-1;;;;;11876:35:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11922:17:0;;;-1:-1:-1;;;11922:17:0;;;;;;;;;;-1:-1:-1;;;;;11922:3:0;:9;;;;:17;;;;;-1:-1:-1;;11922:17:0;;;;;;;-1:-1:-1;11922:9:0;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11817:130;:::o;13497:329::-;13565:18;3976:5;;-1:-1:-1;;;;;3976:5:0;3962:10;:19;3954:64;;;;;-1:-1:-1;;;3954:64:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13596:13:::1;13612:3;-1:-1:-1::0;;;;;13612:13:0::1;;13634:4;13612:28;;;;;;;;;;;;;-1:-1:-1::0;;;;;13612:28:0::1;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;13612:28:0;13651:16:::1;::::0;;-1:-1:-1;;;13651:16:0;;::::1;::::0;::::1;::::0;;;;;13612:28;;-1:-1:-1;;;;;;13651:3:0::1;:9;::::0;::::1;::::0;:16;;;;;-1:-1:-1;;13651:16:0;;;;;;;;-1:-1:-1;13651:9:0;:16;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;13678:14;13695:5;-1:-1:-1::0;;;;;13695:15:0::1;;13719:4;13695:30;;;;;;;;;;;;;-1:-1:-1::0;;;;;13695:30:0::1;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;::::0;::::1;;-1:-1:-1::0;13695:30:0;13804:5:::1;::::0;13757:16;;::::1;::::0;-1:-1:-1;13695:30:0;;-1:-1:-1;13785:33:0::1;::::0;-1:-1:-1;;;;;13785:5:0::1;:18:::0;::::1;::::0;13804:5:::1;13695:30:::0;13785:18:::1;:33::i;:::-;4029:1;;13497:329:::0;;;:::o;2066:20::-;;;-1:-1:-1;;;;;2066:20:0;;:::o;2093:27::-;;;-1:-1:-1;;;;;2093:27:0;;:::o;4630:155::-;4688:9;4718:6;;;:30;;-1:-1:-1;;4733:5:0;;;4747:1;4742;4733:5;4742:1;4728:15;;;;;:20;4718:30;4710:67;;;;;-1:-1:-1;;;4710:67:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;4630:155;;;;:::o;4484:138::-;4577:5;;;4572:16;;;;4564:50;;;;;-1:-1:-1;;;4564:50:0;;;;;;;;;;;;-1:-1:-1;;;4564:50:0;;;;;;;;;;;;;;10133:340;10307:48;;;-1:-1:-1;;;;;10307:48:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10307:48:0;-1:-1:-1;;;10307:48:0;;;10287:69;;;;10252:12;;10266:17;;10287:19;;;;10307:48;10287:69;;;10307:48;10287:69;;10307:48;10287:69;;;;;;;;;;-1:-1:-1;;10287:69:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10251:105;;;;10375:7;:57;;;;-1:-1:-1;10387:11:0;;:16;;:44;;;10418:4;10407:24;;;;;;;;;;;;;;;-1:-1:-1;10407:24:0;10387:44;10367:98;;;;;-1:-1:-1;;;10367:98:0;;;;;;;;;;;;;;;;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"883000","executionCost":"infinite","totalCost":"infinite"},"external":{"claimOwnership()":"45089","exit(uint256)":"infinite","harvest(uint256,address)":"infinite","owner()":"1081","pendingOwner()":"1103","skim(uint256)":"infinite","transferOwnership(address,bool,bool)":"45222","withdraw(uint256)":"infinite"}},"methodIdentifiers":{"claimOwnership()":"4e71e0c8","exit(uint256)":"7f8661a1","harvest(uint256,address)":"18fccc76","owner()":"8da5cb5b","pendingOwner()":"e30c3978","skim(uint256)":"6939aaf5","transferOwnership(address,bool,bool)":"078dfbe7","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISushiBar\",\"name\":\"bar_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"sushi_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amountAdded\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amountAdded\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exit(uint256)\":{\"params\":{\"balance\":\"The amount of tokens the caller thinks it has invested.\"},\"returns\":{\"amountAdded\":\"The delta (+profit or -loss) that occured in contrast to `balance`.\"}},\"harvest(uint256,address)\":{\"params\":{\"balance\":\"The amount of tokens the caller thinks it has invested.\",\"sender\":\"The address of the initiator of this transaction. Can be used for reimbursements, etc.\"},\"returns\":{\"amountAdded\":\"The delta (+profit or -loss) that occured in contrast to `balance`.\"}},\"skim(uint256)\":{\"params\":{\"amount\":\"The amount of tokens to invest.\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}},\"withdraw(uint256)\":{\"details\":\"The `actualAmount` should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.\",\"params\":{\"amount\":\"The requested amount the caller wants to withdraw.\"},\"returns\":{\"actualAmount\":\"The real amount that is withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"exit(uint256)\":{\"notice\":\"Withdraw all assets in the safest way possible. This shouldn't fail.\"},\"harvest(uint256,address)\":{\"notice\":\"Harvest any profits made converted to the asset and pass them to the caller.\"},\"skim(uint256)\":{\"notice\":\"Send the assets to the Strategy and call skim to invest them.\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw assets. The returned amount can differ from the requested amount due to rounding.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/flat/SushiStrategyFlat.sol\":\"SushiStrategyV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":256},\"remappings\":[]},\"sources\":{\"contracts/flat/SushiStrategyFlat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n// solhint-disable avoid-low-level-calls\\r\\n// solhint-disable not-rely-on-time\\r\\n\\r\\n// File contracts/interfaces/IStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IStrategy {\\r\\n    /// @notice Send the assets to the Strategy and call skim to invest them.\\r\\n    /// @param amount The amount of tokens to invest.\\r\\n    function skim(uint256 amount) external;\\r\\n\\r\\n    /// @notice Harvest any profits made converted to the asset and pass them to the caller.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @param sender The address of the initiator of this transaction. Can be used for reimbursements, etc.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\\r\\n\\r\\n    /// @notice Withdraw assets. The returned amount can differ from the requested amount due to rounding.\\r\\n    /// @dev The `actualAmount` should be very close to the amount.\\r\\n    /// The difference should NOT be used to report a loss. That's what harvest is for.\\r\\n    /// @param amount The requested amount the caller wants to withdraw.\\r\\n    /// @return actualAmount The real amount that is withdrawn.\\r\\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\\r\\n\\r\\n    /// @notice Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @param balance The amount of tokens the caller thinks it has invested.\\r\\n    /// @return amountAdded The delta (+profit or -loss) that occured in contrast to `balance`.\\r\\n    function exit(uint256 balance) external returns (int256 amountAdded);\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/BoringOwnable.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\r\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\r\\n// Edited by BoringCrypto\\r\\n\\r\\ncontract BoringOwnableData {\\r\\n    address public owner;\\r\\n    address public pendingOwner;\\r\\n}\\r\\n\\r\\ncontract BoringOwnable is BoringOwnableData {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice `owner` defaults to msg.sender on construction.\\r\\n    constructor() public {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\r\\n    /// Can only be invoked by the current `owner`.\\r\\n    /// @param newOwner Address of the new owner.\\r\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\r\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) public onlyOwner {\\r\\n        if (direct) {\\r\\n            // Checks\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            // Effects\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n            pendingOwner = address(0);\\r\\n        } else {\\r\\n            // Effects\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n\\r\\n        // Checks\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        // Effects\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Only allows the `owner` to execute the function.\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe math,\\r\\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\\r\\nlibrary BoringMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        require(b == 0 || (c = a * b) / b == a, \\\"BoringMath: Mul Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\r\\n        require(a <= uint128(-1), \\\"BoringMath: uint128 Overflow\\\");\\r\\n        c = uint128(a);\\r\\n    }\\r\\n\\r\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\r\\n        require(a <= uint64(-1), \\\"BoringMath: uint64 Overflow\\\");\\r\\n        c = uint64(a);\\r\\n    }\\r\\n\\r\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\r\\n        require(a <= uint32(-1), \\\"BoringMath: uint32 Overflow\\\");\\r\\n        c = uint32(a);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\\r\\nlibrary BoringMath128 {\\r\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\\r\\nlibrary BoringMath64 {\\r\\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\\r\\nlibrary BoringMath32 {\\r\\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a + b) >= b, \\\"BoringMath: Add Overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\\r\\n        require((c = a - b) <= a, \\\"BoringMath: Underflow\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /// @notice EIP 2612\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\\r\\n// License-Identifier: MIT\\r\\n\\r\\nlibrary BoringERC20 {\\r\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\r\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\r\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\r\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\r\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\r\\n\\r\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\r\\n        if (data.length >= 64) {\\r\\n            return abi.decode(data, (string));\\r\\n        } else if (data.length == 32) {\\r\\n            uint8 i = 0;\\r\\n            while (i < 32 && data[i] != 0) {\\r\\n                i++;\\r\\n            }\\r\\n            bytes memory bytesArray = new bytes(i);\\r\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\r\\n                bytesArray[i] = data[i];\\r\\n            }\\r\\n            return string(bytesArray);\\r\\n        } else {\\r\\n            return \\\"???\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token symbol.\\r\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (string) Token name.\\r\\n    function safeName(IERC20 token) internal view returns (string memory) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\r\\n        return success ? returnDataToString(data) : \\\"???\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\r\\n    /// @param token The address of the ERC-20 token contract.\\r\\n    /// @return (uint8) Token decimals.\\r\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\r\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\r\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\r\\n    /// Reverts on a failed transfer.\\r\\n    /// @param token The address of the ERC-20 token.\\r\\n    /// @param from Transfer tokens from.\\r\\n    /// @param to Transfer tokens to.\\r\\n    /// @param amount The token amount.\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// File contracts/strategies/SushiStrategy.sol\\r\\n// License-Identifier: MIT\\r\\n\\r\\ninterface ISushiBar is IERC20 {\\r\\n    function enter(uint256 _amount) external;\\r\\n\\r\\n    function leave(uint256 _share) external;\\r\\n}\\r\\n\\r\\ncontract SushiStrategyV1 is IStrategy, BoringOwnable {\\r\\n    using BoringMath for uint256;\\r\\n    using BoringERC20 for IERC20;\\r\\n\\r\\n    IERC20 private immutable sushi;\\r\\n    ISushiBar private immutable bar;\\r\\n\\r\\n    constructor(ISushiBar bar_, IERC20 sushi_) public {\\r\\n        bar = bar_;\\r\\n        sushi = sushi_;\\r\\n    }\\r\\n\\r\\n    // Send the assets to the Strategy and call skim to invest them\\r\\n    /// @inheritdoc IStrategy\\r\\n    function skim(uint256 amount) external override {\\r\\n        sushi.approve(address(bar), amount);\\r\\n        bar.enter(amount);\\r\\n    }\\r\\n\\r\\n    // Harvest any profits made converted to the asset and pass them to the caller\\r\\n    /// @inheritdoc IStrategy\\r\\n    function harvest(uint256 balance, address) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 keepShare = balance.mul(totalShares) / totalSushi;\\r\\n        uint256 harvestShare = share.sub(keepShare);\\r\\n        bar.leave(harvestShare);\\r\\n        amountAdded = int256(sushi.balanceOf(address(this)));\\r\\n        sushi.safeTransfer(owner, uint256(amountAdded)); // Add as profit\\r\\n    }\\r\\n\\r\\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding or if the request was more than there is.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function withdraw(uint256 amount) external override onlyOwner returns (uint256 actualAmount) {\\r\\n        uint256 totalShares = bar.totalSupply();\\r\\n        uint256 totalSushi = sushi.balanceOf(address(bar));\\r\\n        uint256 withdrawShare = amount.mul(totalShares) / totalSushi;\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        if (withdrawShare > share) {\\r\\n            withdrawShare = share;\\r\\n        }\\r\\n        bar.leave(withdrawShare);\\r\\n        actualAmount = sushi.balanceOf(address(this));\\r\\n        sushi.safeTransfer(owner, actualAmount);\\r\\n    }\\r\\n\\r\\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\\r\\n    /// @inheritdoc IStrategy\\r\\n    function exit(uint256 balance) external override onlyOwner returns (int256 amountAdded) {\\r\\n        uint256 share = bar.balanceOf(address(this));\\r\\n        bar.leave(share);\\r\\n        uint256 amount = sushi.balanceOf(address(this));\\r\\n        amountAdded = int256(amount - balance);\\r\\n        sushi.safeTransfer(owner, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde08dfa320b1673a0fe8574910273ad35ef10aa284095acf1e504c1b8d21c33c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":36,"contract":"contracts/flat/SushiStrategyFlat.sol:SushiStrategyV1","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":38,"contract":"contracts/flat/SushiStrategyFlat.sol:SushiStrategyV1","label":"pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"claimOwnership()":{"notice":"Needs to be called by `pendingOwner` to claim ownership."},"exit(uint256)":{"notice":"Withdraw all assets in the safest way possible. This shouldn't fail."},"harvest(uint256,address)":{"notice":"Harvest any profits made converted to the asset and pass them to the caller."},"skim(uint256)":{"notice":"Send the assets to the Strategy and call skim to invest them."},"transferOwnership(address,bool,bool)":{"notice":"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."},"withdraw(uint256)":{"notice":"Withdraw assets. The returned amount can differ from the requested amount due to rounding."}},"version":1}}}}}}