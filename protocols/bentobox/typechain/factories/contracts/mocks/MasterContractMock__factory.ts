/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MasterContractMock,
  MasterContractMockInterface,
} from "../../../contracts/mocks/MasterContractMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract BentoBox",
        name: "_bentoBox",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "bentoBox",
    outputs: [
      {
        internalType: "contract BentoBox",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516102943803806102948339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661022861006c6000398061015252806101d052506102286000f3fe6080604052600436106100345760003560e01c806347e7ef24146100395780634ddf47d4146100745780636b2ace87146100e4575b600080fd5b34801561004557600080fd5b506100726004803603604081101561005c57600080fd5b506001600160a01b038135169060200135610115565b005b6100726004803603602081101561008a57600080fd5b8101906020810181356401000000008111156100a557600080fd5b8201836020820111156100b757600080fd5b803590602001918460018302840111640100000000831117156100d957600080fd5b5090925090506101ca565b3480156100f057600080fd5b506100f96101ce565b604080516001600160a01b039092168252519081900360200190f35b6040805162ae511b60e21b81526001600160a01b0384811660048301523360248301523060448301526000606483018190526084830185905283517f0000000000000000000000000000000000000000000000000000000000000000909216936302b9446c9360a4808201949293918390030190829087803b15801561019a57600080fd5b505af11580156101ae573d6000803e3d6000fd5b505050506040513d60408110156101c457600080fd5b50505050565b5050565b7f00000000000000000000000000000000000000000000000000000000000000008156fea2646970667358221220c0e2273cdf4c61345fb01bcf17c96de5d12e87cefa77899089f0e001c8c9ad0364736f6c634300060c0033";

type MasterContractMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MasterContractMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MasterContractMock__factory extends ContractFactory {
  constructor(...args: MasterContractMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _bentoBox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MasterContractMock> {
    return super.deploy(
      _bentoBox,
      overrides || {}
    ) as Promise<MasterContractMock>;
  }
  override getDeployTransaction(
    _bentoBox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_bentoBox, overrides || {});
  }
  override attach(address: string): MasterContractMock {
    return super.attach(address) as MasterContractMock;
  }
  override connect(signer: Signer): MasterContractMock__factory {
    return super.connect(signer) as MasterContractMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MasterContractMockInterface {
    return new utils.Interface(_abi) as MasterContractMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MasterContractMock {
    return new Contract(address, _abi, signerOrProvider) as MasterContractMock;
  }
}
