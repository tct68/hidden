/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CompoundStrategy,
  CompoundStrategyInterface,
} from "../../../../contracts/strategies/CompoundStrategy.sol/CompoundStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "bentobox_",
        type: "address",
      },
      {
        internalType: "contract IFactory",
        name: "factory_",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token_",
        type: "address",
      },
      {
        internalType: "contract IcToken",
        name: "cToken_",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "compToken_",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "weth_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "afterExit",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "bentobox",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cToken",
    outputs: [
      {
        internalType: "contract IcToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "compToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "exit",
    outputs: [
      {
        internalType: "int256",
        name: "amountAdded",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "exited",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract IFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "harvest",
    outputs: [
      {
        internalType: "int256",
        name: "amountAdded",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minAmount",
        type: "uint256",
      },
    ],
    name: "harvestCOMP",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "skim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
      {
        internalType: "bool",
        name: "direct",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "renounce",
        type: "bool",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "weth",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "actualAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x61014060405234801561001157600080fd5b50604051611fc3380380611fc3833981810160405260c081101561003457600080fd5b50805160208201516040808401516060850151608086015160a090960151600080546001600160a01b0319163390811782559451969795969395929492939192917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160601b0319606087811b821660805286811b82166101205285811b821660a05284811b821660c05283811b821660e05282901b16610100526040805163095ea7b360e01b81526001600160a01b038581166004830152600019602483015291519186169163095ea7b3916044808201926020929091908290030181600087803b15801561012a57600080fd5b505af115801561013e573d6000803e3d6000fd5b505050506040513d602081101561015457600080fd5b505050505050505060805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c611d8561023e6000398061145052806116155250806103ba52806103e65280610c335250806103995280610d2952508061070452806107a95280610a625280610e245280610f08528061100752806110b852806111865280611276525080610407528061089052806109365280610b645280610be552806110e8528061130e52806113b952806115ee5250806105d7528061095852806109945280610c075280610d565280610f3752806113db528061142c5250611d856000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636939aaf5116100a2578063b649d03211610071578063b649d0321461025a578063c45a015514610262578063d9253c2d1461026a578063e30c397814610325578063fc0c546a1461032d5761010b565b80636939aaf51461021057806369e527da1461022d5780637f8661a1146102355780638da5cb5b146102525761010b565b80633fc8cef3116100de5780633fc8cef3146101c05780634e71e0c8146101e45780635ce6c327146101ec5780636605dfa7146102085761010b565b8063022444e614610110578063078dfbe71461012f57806318fccc76146101655780632e1a7d4d146101a3575b600080fd5b61012d6004803603602081101561012657600080fd5b5035610335565b005b61012d6004803603606081101561014557600080fd5b506001600160a01b03813516906020810135151590604001351515610482565b6101916004803603604081101561017b57600080fd5b50803590602001356001600160a01b03166105ca565b60408051918252519081900360200190f35b610191600480360360208110156101b957600080fd5b5035610987565b6101c8610c31565b604080516001600160a01b039092168252519081900360200190f35b61012d610c55565b6101f4610d17565b604080519115158252519081900360200190f35b6101c8610d27565b61012d6004803603602081101561022657600080fd5b5035610d4b565b6101c8610f06565b6101916004803603602081101561024b57600080fd5b5035610f2a565b6101c861141b565b6101c861142a565b6101c861144e565b6101f46004803603606081101561028057600080fd5b6001600160a01b03823516916020810135918101906060810160408201356401000000008111156102b057600080fd5b8201836020820111156102c257600080fd5b803590602001918460018302840111640100000000831117156102e457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611472945050505050565b6101c86115dd565b6101c86115ec565b6000546001600160a01b03163314610394576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6103df7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000030611610565b508061042c7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000030611610565b101561047f576040805162461bcd60e51b815260206004820152601c60248201527f436f6d706f756e6453747261746567793a206e6f7420656e6f75676800000000604482015290519081900360640190fd5b50565b6000546001600160a01b031633146104e1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b81156105a9576001600160a01b0383161515806104fb5750805b610544576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b0319918216179091556001805490911690556105c5565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610649576040805162461bcd60e51b815260206004820152601c60248201527f436f6d706f756e6453747261746567793a206f6e6c792062656e746f00000000604482015290519081900360640190fd5b600154600160a01b900460ff16156106a3576040805162461bcd60e51b815260206004820152601860248201527710dbdb5c1bdd5b9914dd1c985d1959de4e88195e1a5d195960421b604482015290519081900360640190fd5b6001600160a01b0382163214610700576040805162461bcd60e51b815260206004820152601a60248201527f436f6d706f756e6453747261746567793a20454f41206f6e6c79000000000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633af9e669306040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b15801561077157600080fd5b505af1158015610785573d6000803e3d6000fd5b505050506040513d602081101561079b57600080fd5b505190506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663852a12e36107d88387611ad1565b6040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506040513d602081101561083857600080fd5b50511561088c576040805162461bcd60e51b815260206004820152601d60248201527f436f6d706f756e6453747261746567793a2070726f666974206661696c000000604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156108fb57600080fd5b505afa15801561090f573d6000803e3d6000fd5b505050506040513d602081101561092557600080fd5b5051905061097d6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611b21565b9150505b92915050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a06576040805162461bcd60e51b815260206004820152601c60248201527f436f6d706f756e6453747261746567793a206f6e6c792062656e746f00000000604482015290519081900360640190fd5b600154600160a01b900460ff1615610a60576040805162461bcd60e51b815260206004820152601860248201527710dbdb5c1bdd5b9914dd1c985d1959de4e88195e1a5d195960421b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663852a12e3836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610ac657600080fd5b505af1158015610ada573d6000803e3d6000fd5b505050506040513d6020811015610af057600080fd5b505115610b44576040805162461bcd60e51b815260206004820152601d60248201527f436f6d706f756e6453747261746567793a2072656465656d206661696c000000604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b158015610baa57600080fd5b505afa158015610bbe573d6000803e3d6000fd5b505050506040513d6020811015610bd457600080fd5b50519050610c2c6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611b21565b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001546001600160a01b0316338114610cb5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b600154600160a01b900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610dc8576040805162461bcd60e51b815260206004820152601c60248201527f436f6d706f756e6453747261746567793a206f6e6c792062656e746f00000000604482015290519081900360640190fd5b600154600160a01b900460ff1615610e22576040805162461bcd60e51b815260206004820152601860248201527710dbdb5c1bdd5b9914dd1c985d1959de4e88195e1a5d195960421b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a0712d68826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610e8857600080fd5b505af1158015610e9c573d6000803e3d6000fd5b505050506040513d6020811015610eb257600080fd5b50511561047f576040805162461bcd60e51b815260206004820152601c60248201527f436f6d706f756e6453747261746567793a206d696e74206572726f7200000000604482015290519081900360640190fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fa9576040805162461bcd60e51b815260206004820152601c60248201527f436f6d706f756e6453747261746567793a206f6e6c792062656e746f00000000604482015290519081900360640190fd5b600154600160a01b900460ff1615611003576040805162461bcd60e51b815260206004820152601860248201527710dbdb5c1bdd5b9914dd1c985d1959de4e88195e1a5d195960421b604482015290519081900360640190fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633af9e669306040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050602060405180830381600087803b15801561107457600080fd5b505af1158015611088573d6000803e3d6000fd5b505050506040513d602081101561109e57600080fd5b5051604080516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015291519293506000927f0000000000000000000000000000000000000000000000000000000000000000909216916370a0823191602480820192602092909190829003018186803b15801561113157600080fd5b505afa158015611145573d6000803e3d6000fd5b505050506040513d602081101561115b57600080fd5b5051905080821161127457604080516370a0823160e01b815230600482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163db006a759183916370a08231916024808301926020929190829003018186803b1580156111d457600080fd5b505afa1580156111e8573d6000803e3d6000fd5b505050506040513d60208110156111fe57600080fd5b5051604080516001600160e01b031960e085901b16815260048101929092525160248083019260209291908290030181600087803b15801561123f57600080fd5b505af192505050801561126457506040513d602081101561125f57600080fd5b505160015b61126d5761126f565b505b61130a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663852a12e3826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156112da57600080fd5b505af19250505080156112ff57506040513d60208110156112fa57600080fd5b505160015b6113085761130a565b505b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561137957600080fd5b505afa15801561138d573d6000803e3d6000fd5b505050506040513d60208110156113a357600080fd5b5051858103945090506114006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083611b21565b50506001805460ff60a01b1916600160a01b17905550919050565b6000546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080546001600160a01b031633146114d2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600154600160a01b900460ff16611530576040805162461bcd60e51b815260206004820152601c60248201527f436f6d706f756e6453747261746567793a204e6f742065786974656400000000604482015290519081900360640190fd5b836001600160a01b031683836040518082805190602001908083835b6020831061156b5780518252601f19909201916020918201910161154c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146115cd576040519150601f19603f3d011682016040523d82523d6000602084013e6115d2565b606091505b509095945050505050565b6001546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a4390586866040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561169157600080fd5b505afa1580156116a5573d6000803e3d6000fd5b505050506040513d60208110156116bb57600080fd5b505190506001600160a01b03811661171a576040805162461bcd60e51b815260206004820181905260248201527f436f6d706f756e6453747261746567793a2043616e6e6f7420636f6e76657274604482015290519081900360640190fd5b6000856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561176957600080fd5b505afa15801561177d573d6000803e3d6000fd5b505050506040513d602081101561179357600080fd5b505160408051630240bc6b60e21b8152905191925060009182916001600160a01b03861691630902f1ac91600480820192606092909190829003018186803b1580156117de57600080fd5b505afa1580156117f2573d6000803e3d6000fd5b505050506040513d606081101561180857600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506000611836846103e5611c8b565b905061184c6001600160a01b038a168686611b21565b876001600160a01b0316896001600160a01b031610156119ae5761187c81611876856103e8611c8b565b90611cf7565b6118928361188c876103e5611c8b565b90611c8b565b8161189957fe5b0495506001600160a01b03851663022c0d9f6000888a826040519080825280601f01601f1916602001820160405280156118da576020820181803683370190505b506040518563ffffffff1660e01b815260040180858152602001848152602001836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561194257818101518382015260200161192a565b50505050905090810190601f16801561196f5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561199157600080fd5b505af11580156119a5573d6000803e3d6000fd5b50505050611ac5565b6119be81611876846103e8611c8b565b6119ce8461188c876103e5611c8b565b816119d557fe5b604080516000808252602082019283905263022c0d9f60e01b83529390920460248301818152604484018590526001600160a01b038c81166064860152608060848601908152855160a48701819052939c50908b169563022c0d9f958d9591948f949193919260c48501918083838a5b83811015611a5d578181015183820152602001611a45565b50505050905090810190601f168015611a8a5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015611aac57600080fd5b505af1158015611ac0573d6000803e3d6000fd5b505050505b50505050509392505050565b80820382811115610981576040805162461bcd60e51b8152602060048201526015602482015274426f72696e674d6174683a20556e646572666c6f7760581b604482015290519081900360640190fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b60208310611b9e5780518252601f199092019160209182019101611b7f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611c00576040519150601f19603f3d011682016040523d82523d6000602084013e611c05565b606091505b5091509150818015611c33575080511580611c335750808060200190516020811015611c3057600080fd5b50515b611c84576040805162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015290519081900360640190fd5b5050505050565b6000811580611ca657505080820282828281611ca357fe5b04145b610981576040805162461bcd60e51b815260206004820152601860248201527f426f72696e674d6174683a204d756c204f766572666c6f770000000000000000604482015290519081900360640190fd5b81810181811015610981576040805162461bcd60e51b815260206004820152601860248201527f426f72696e674d6174683a20416464204f766572666c6f770000000000000000604482015290519081900360640190fdfea2646970667358221220e86d18616987416bbcff8cf93261b13a96df1d1a699cbfab363860c11ce49a5064736f6c634300060c0033";

type CompoundStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CompoundStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CompoundStrategy__factory extends ContractFactory {
  constructor(...args: CompoundStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    bentobox_: PromiseOrValue<string>,
    factory_: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    cToken_: PromiseOrValue<string>,
    compToken_: PromiseOrValue<string>,
    weth_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CompoundStrategy> {
    return super.deploy(
      bentobox_,
      factory_,
      token_,
      cToken_,
      compToken_,
      weth_,
      overrides || {}
    ) as Promise<CompoundStrategy>;
  }
  override getDeployTransaction(
    bentobox_: PromiseOrValue<string>,
    factory_: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    cToken_: PromiseOrValue<string>,
    compToken_: PromiseOrValue<string>,
    weth_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      bentobox_,
      factory_,
      token_,
      cToken_,
      compToken_,
      weth_,
      overrides || {}
    );
  }
  override attach(address: string): CompoundStrategy {
    return super.attach(address) as CompoundStrategy;
  }
  override connect(signer: Signer): CompoundStrategy__factory {
    return super.connect(signer) as CompoundStrategy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CompoundStrategyInterface {
    return new utils.Interface(_abi) as CompoundStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CompoundStrategy {
    return new Contract(address, _abi, signerOrProvider) as CompoundStrategy;
  }
}
